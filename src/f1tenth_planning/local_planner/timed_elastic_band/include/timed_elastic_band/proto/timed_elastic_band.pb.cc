// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timed_elastic_band.proto

#include "timed_elastic_band.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FootprintModel_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameID_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoalTolerance_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacles_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Optimization_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recovery_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot_timed_5felastic_5fband_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_timed_5felastic_5fband_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trajectory_timed_5felastic_5fband_2eproto;
namespace f1tenth_local_planner {
class FrameIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameID> _instance;
} _FrameID_default_instance_;
class Point2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2D> _instance;
} _Point2D_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class FootprintModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FootprintModel> _instance;
} _FootprintModel_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot> _instance;
} _Robot_default_instance_;
class GoalToleranceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoalTolerance> _instance;
} _GoalTolerance_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacles> _instance;
} _Obstacles_default_instance_;
class OptimizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Optimization> _instance;
} _Optimization_default_instance_;
class HomotopyClassPlannerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HomotopyClassPlanner> _instance;
} _HomotopyClassPlanner_default_instance_;
class RecoveryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Recovery> _instance;
} _Recovery_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
}  // namespace f1tenth_local_planner
static void InitDefaultsscc_info_Config_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Config_default_instance_;
    new (ptr) ::f1tenth_local_planner::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Config_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Config_timed_5felastic_5fband_2eproto}, {
      &scc_info_FrameID_timed_5felastic_5fband_2eproto.base,
      &scc_info_Trajectory_timed_5felastic_5fband_2eproto.base,
      &scc_info_Robot_timed_5felastic_5fband_2eproto.base,
      &scc_info_GoalTolerance_timed_5felastic_5fband_2eproto.base,
      &scc_info_Obstacles_timed_5felastic_5fband_2eproto.base,
      &scc_info_Optimization_timed_5felastic_5fband_2eproto.base,
      &scc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto.base,
      &scc_info_FootprintModel_timed_5felastic_5fband_2eproto.base,
      &scc_info_Recovery_timed_5felastic_5fband_2eproto.base,}};

static void InitDefaultsscc_info_FootprintModel_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_FootprintModel_default_instance_;
    new (ptr) ::f1tenth_local_planner::FootprintModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FootprintModel_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FootprintModel_timed_5felastic_5fband_2eproto}, {
      &scc_info_Point2D_timed_5felastic_5fband_2eproto.base,}};

static void InitDefaultsscc_info_FrameID_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_FrameID_default_instance_;
    new (ptr) ::f1tenth_local_planner::FrameID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameID_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameID_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_GoalTolerance_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_GoalTolerance_default_instance_;
    new (ptr) ::f1tenth_local_planner::GoalTolerance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoalTolerance_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GoalTolerance_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_HomotopyClassPlanner_default_instance_;
    new (ptr) ::f1tenth_local_planner::HomotopyClassPlanner();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_Obstacles_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Obstacles_default_instance_;
    new (ptr) ::f1tenth_local_planner::Obstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacles_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Obstacles_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_Optimization_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Optimization_default_instance_;
    new (ptr) ::f1tenth_local_planner::Optimization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Optimization_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Optimization_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_Point2D_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Point2D_default_instance_;
    new (ptr) ::f1tenth_local_planner::Point2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2D_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_Recovery_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Recovery_default_instance_;
    new (ptr) ::f1tenth_local_planner::Recovery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Recovery_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Recovery_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_Robot_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Robot_default_instance_;
    new (ptr) ::f1tenth_local_planner::Robot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Robot_timed_5felastic_5fband_2eproto}, {}};

static void InitDefaultsscc_info_Trajectory_timed_5felastic_5fband_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_local_planner::_Trajectory_default_instance_;
    new (ptr) ::f1tenth_local_planner::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trajectory_timed_5felastic_5fband_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trajectory_timed_5felastic_5fband_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_timed_5felastic_5fband_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_timed_5felastic_5fband_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_timed_5felastic_5fband_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_timed_5felastic_5fband_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FrameID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FrameID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FrameID, odom_frame_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FrameID, map_frame_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Point2D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Point2D, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, teb_autosize_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, dt_ref_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, dt_hysteresis_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, global_plan_overwrite_orientation_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, allow_init_with_backwards_motion_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, global_plan_viapoint_sep_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, via_points_ordered_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, max_global_plan_lookahead_dist_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, exact_arc_length_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, force_reinit_new_goal_dist_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, feasibility_check_no_poses_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, publish_feedback_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, min_samples_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Trajectory, max_samples_),
  2,
  0,
  1,
  3,
  4,
  6,
  5,
  7,
  12,
  8,
  9,
  13,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, type_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, radius_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, front_offset_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, front_radius_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, rear_offset_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, rear_radius_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::FootprintModel, robot_vertices_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, max_vel_x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, max_vel_x_backwards_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, max_vel_y_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, max_vel_theta_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, acc_lim_x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, acc_lim_y_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, acc_lim_theta_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, min_turning_radius_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, wheelbase_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Robot, cmd_angle_instead_rotvel_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::GoalTolerance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::GoalTolerance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::GoalTolerance, xy_goal_tolerance_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::GoalTolerance, yaw_goal_tolerance_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::GoalTolerance, free_goal_vel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, min_obstacle_dist_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, inflation_dist_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, include_costmap_obstacles_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, costmap_obstacles_behind_robot_dist_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, obstacle_poses_affected_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, legacy_obstacle_association_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, obstacle_association_cutoff_factor_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, obstacle_association_force_inclusion_factor_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, costmap_converter_plugin_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, costmap_converter_spin_thread_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Obstacles, costmap_converter_rate_),
  1,
  2,
  5,
  3,
  4,
  6,
  8,
  9,
  0,
  7,
  10,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, no_inner_iterations_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, no_outer_iterations_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, optimization_activate_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, optimization_verbose_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, penalty_epsilon_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_max_vel_x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_max_vel_y_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_max_vel_theta_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_acc_lim_x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_acc_lim_y_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_acc_lim_thet_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_kinematics_nh_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_kinematics_forward_drive_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_kinematics_turning_radius_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_optimaltime_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_obstacle_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_inflation_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_dynamic_obstacle_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_viapoint_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_adapt_factor_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_prefer_rotdir_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Optimization, weight_acc_lim_theta_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, enable_homotopy_class_planning_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, enable_multithreading_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, simple_exploration_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, max_number_classes_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, selection_obst_cost_scale_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, selection_prefer_initial_plan_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, selection_viapoint_cost_scale_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, selection_cost_hysteresis_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, selection_alternative_time_cost_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, roadmap_graph_no_samples_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, roadmap_graph_area_width_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, roadmap_graph_area_length_scale_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, h_signature_prescaler_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, h_signature_threshold_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, obstacle_keypoint_offset_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, obstacle_heading_threshold_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, viapoints_all_candidates_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::HomotopyClassPlanner, visualize_hc_graph_),
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  3,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, shrink_horizon_min_duration_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, oscillation_recovery_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, shrink_horizon_backup_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, oscillation_v_eps_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, oscillation_omega_eps_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, oscillation_recovery_min_duration_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Recovery, oscillation_filter_duration_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, opt_frame_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, trajectory_opt_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, kinematics_opt_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, tolerance_opt_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, obstacles_opt_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, optimize_info_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, hcp_opt_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, robot_type_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_local_planner::Config, recovery_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::f1tenth_local_planner::FrameID)},
  { 9, 16, sizeof(::f1tenth_local_planner::Point2D)},
  { 18, 37, sizeof(::f1tenth_local_planner::Trajectory)},
  { 51, 63, sizeof(::f1tenth_local_planner::FootprintModel)},
  { 70, 85, sizeof(::f1tenth_local_planner::Robot)},
  { 95, 103, sizeof(::f1tenth_local_planner::GoalTolerance)},
  { 106, 122, sizeof(::f1tenth_local_planner::Obstacles)},
  { 133, 160, sizeof(::f1tenth_local_planner::Optimization)},
  { 182, 205, sizeof(::f1tenth_local_planner::HomotopyClassPlanner)},
  { 223, 235, sizeof(::f1tenth_local_planner::Recovery)},
  { 242, 256, sizeof(::f1tenth_local_planner::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_FrameID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_FootprintModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Robot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_GoalTolerance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Obstacles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Optimization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_HomotopyClassPlanner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Recovery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_local_planner::_Config_default_instance_),
};

const char descriptor_table_protodef_timed_5felastic_5fband_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030timed_elastic_band.proto\022\025f1tenth_loca"
  "l_planner\"0\n\007FrameID\022\022\n\nodom_frame\030\001 \001(\t"
  "\022\021\n\tmap_frame\030\002 \001(\t\"\037\n\007Point2D\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\"\252\003\n\nTrajectory\022\024\n\014teb_autos"
  "ize\030\001 \001(\010\022\016\n\006dt_ref\030\002 \001(\002\022\025\n\rdt_hysteres"
  "is\030\003 \001(\002\022)\n!global_plan_overwrite_orient"
  "ation\030\004 \001(\010\022(\n allow_init_with_backwards"
  "_motion\030\005 \001(\010\022 \n\030global_plan_viapoint_se"
  "p\030\006 \001(\002\022\032\n\022via_points_ordered\030\007 \001(\010\022&\n\036m"
  "ax_global_plan_lookahead_dist\030\010 \001(\002\022\030\n\020e"
  "xact_arc_length\030\t \001(\010\022\"\n\032force_reinit_ne"
  "w_goal_dist\030\n \001(\002\022\"\n\032feasibility_check_n"
  "o_poses\030\013 \001(\003\022\030\n\020publish_feedback\030\014 \001(\010\022"
  "\023\n\013min_samples\030\r \001(\003\022\023\n\013max_samples\030\016 \001("
  "\003\"\302\002\n\016FootprintModel\022A\n\004type\030\001 \001(\01623.f1t"
  "enth_local_planner.FootprintModel.Footpr"
  "intType\022\016\n\006radius\030\002 \001(\001\022\024\n\014front_offset\030"
  "\003 \001(\001\022\024\n\014front_radius\030\004 \001(\001\022\023\n\013rear_offs"
  "et\030\005 \001(\001\022\023\n\013rear_radius\030\006 \001(\001\0226\n\016robot_v"
  "ertices\030\007 \003(\0132\036.f1tenth_local_planner.Po"
  "int2D\"O\n\rFootprintType\022\t\n\005POINT\020\000\022\014\n\010CIR"
  "CULAR\020\001\022\016\n\nTWOCIRCLES\020\002\022\010\n\004LINE\020\003\022\013\n\007POL"
  "YGON\020\004\"\357\001\n\005Robot\022\021\n\tmax_vel_x\030\001 \001(\002\022\033\n\023m"
  "ax_vel_x_backwards\030\002 \001(\002\022\021\n\tmax_vel_y\030\003 "
  "\001(\002\022\025\n\rmax_vel_theta\030\004 \001(\002\022\021\n\tacc_lim_x\030"
  "\005 \001(\002\022\021\n\tacc_lim_y\030\006 \001(\002\022\025\n\racc_lim_thet"
  "a\030\007 \001(\002\022\032\n\022min_turning_radius\030\010 \001(\002\022\021\n\tw"
  "heelbase\030\t \001(\002\022 \n\030cmd_angle_instead_rotv"
  "el\030\n \001(\010\"]\n\rGoalTolerance\022\031\n\021xy_goal_tol"
  "erance\030\001 \001(\002\022\032\n\022yaw_goal_tolerance\030\002 \001(\002"
  "\022\025\n\rfree_goal_vel\030\003 \001(\010\"\236\003\n\tObstacles\022\031\n"
  "\021min_obstacle_dist\030\001 \001(\002\022\026\n\016inflation_di"
  "st\030\002 \001(\002\022!\n\031include_costmap_obstacles\030\003 "
  "\001(\010\022+\n#costmap_obstacles_behind_robot_di"
  "st\030\004 \001(\002\022\037\n\027obstacle_poses_affected\030\005 \001("
  "\002\022#\n\033legacy_obstacle_association\030\006 \001(\010\022*"
  "\n\"obstacle_association_cutoff_factor\030\007 \001"
  "(\002\0223\n+obstacle_association_force_inclusi"
  "on_factor\030\010 \001(\002\022 \n\030costmap_converter_plu"
  "gin\030\t \001(\t\022%\n\035costmap_converter_spin_thre"
  "ad\030\n \001(\010\022\036\n\026costmap_converter_rate\030\013 \001(\002"
  "\"\224\005\n\014Optimization\022\033\n\023no_inner_iterations"
  "\030\001 \001(\005\022\033\n\023no_outer_iterations\030\002 \001(\005\022\035\n\025o"
  "ptimization_activate\030\003 \001(\010\022\034\n\024optimizati"
  "on_verbose\030\004 \001(\010\022\027\n\017penalty_epsilon\030\005 \001("
  "\002\022\030\n\020weight_max_vel_x\030\006 \001(\002\022\030\n\020weight_ma"
  "x_vel_y\030\007 \001(\002\022\034\n\024weight_max_vel_theta\030\010 "
  "\001(\002\022\030\n\020weight_acc_lim_x\030\t \001(\002\022\030\n\020weight_"
  "acc_lim_y\030\n \001(\002\022\033\n\023weight_acc_lim_thet\030\013"
  " \001(\002\022\034\n\024weight_kinematics_nh\030\014 \001(\002\022\'\n\037we"
  "ight_kinematics_forward_drive\030\r \001(\002\022(\n w"
  "eight_kinematics_turning_radius\030\016 \001(\002\022\032\n"
  "\022weight_optimaltime\030\017 \001(\002\022\027\n\017weight_obst"
  "acle\030\020 \001(\002\022\030\n\020weight_inflation\030\021 \001(\002\022\037\n\027"
  "weight_dynamic_obstacle\030\022 \001(\002\022\027\n\017weight_"
  "viapoint\030\023 \001(\002\022\033\n\023weight_adapt_factor\030\024 "
  "\001(\002\022\034\n\024weight_prefer_rotdir\030\025 \001(\002\022\034\n\024wei"
  "ght_acc_lim_theta\030\026 \001(\002\"\201\005\n\024HomotopyClas"
  "sPlanner\022&\n\036enable_homotopy_class_planni"
  "ng\030\001 \001(\010\022\035\n\025enable_multithreading\030\002 \001(\010\022"
  "\032\n\022simple_exploration\030\003 \001(\010\022\032\n\022max_numbe"
  "r_classes\030\004 \001(\005\022!\n\031selection_obst_cost_s"
  "cale\030\005 \001(\002\022%\n\035selection_prefer_initial_p"
  "lan\030\006 \001(\002\022%\n\035selection_viapoint_cost_sca"
  "le\030\007 \001(\002\022!\n\031selection_cost_hysteresis\030\010 "
  "\001(\002\022\'\n\037selection_alternative_time_cost\030\t"
  " \001(\010\022 \n\030roadmap_graph_no_samples\030\n \001(\005\022 "
  "\n\030roadmap_graph_area_width\030\013 \001(\005\022\'\n\037road"
  "map_graph_area_length_scale\030\014 \001(\002\022\035\n\025h_s"
  "ignature_prescaler\030\r \001(\002\022\035\n\025h_signature_"
  "threshold\030\016 \001(\002\022 \n\030obstacle_keypoint_off"
  "set\030\017 \001(\002\022\"\n\032obstacle_heading_threshold\030"
  "\020 \001(\002\022 \n\030viapoints_all_candidates\030\021 \001(\010\022"
  "\032\n\022visualize_hc_graph\030\022 \001(\010\"\366\001\n\010Recovery"
  "\022#\n\033shrink_horizon_min_duration\030\001 \001(\010\022\034\n"
  "\024oscillation_recovery\030\002 \001(\010\022\035\n\025shrink_ho"
  "rizon_backup\030\003 \001(\010\022\031\n\021oscillation_v_eps\030"
  "\004 \001(\001\022\035\n\025oscillation_omega_eps\030\005 \001(\001\022)\n!"
  "oscillation_recovery_min_duration\030\006 \001(\001\022"
  "#\n\033oscillation_filter_duration\030\007 \001(\001\"\217\004\n"
  "\006Config\0221\n\topt_frame\030\001 \001(\0132\036.f1tenth_loc"
  "al_planner.FrameID\0229\n\016trajectory_opt\030\002 \001"
  "(\0132!.f1tenth_local_planner.Trajectory\0224\n"
  "\016kinematics_opt\030\003 \001(\0132\034.f1tenth_local_pl"
  "anner.Robot\022;\n\rtolerance_opt\030\004 \001(\0132$.f1t"
  "enth_local_planner.GoalTolerance\0227\n\robst"
  "acles_opt\030\005 \001(\0132 .f1tenth_local_planner."
  "Obstacles\022:\n\roptimize_info\030\006 \001(\0132#.f1ten"
  "th_local_planner.Optimization\022<\n\007hcp_opt"
  "\030\007 \001(\0132+.f1tenth_local_planner.HomotopyC"
  "lassPlanner\0229\n\nrobot_type\030\010 \003(\0132%.f1tent"
  "h_local_planner.FootprintModel\0226\n\rrecove"
  "ry_info\030\t \001(\0132\037.f1tenth_local_planner.Re"
  "covery"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_timed_5felastic_5fband_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_timed_5felastic_5fband_2eproto_sccs[11] = {
  &scc_info_Config_timed_5felastic_5fband_2eproto.base,
  &scc_info_FootprintModel_timed_5felastic_5fband_2eproto.base,
  &scc_info_FrameID_timed_5felastic_5fband_2eproto.base,
  &scc_info_GoalTolerance_timed_5felastic_5fband_2eproto.base,
  &scc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto.base,
  &scc_info_Obstacles_timed_5felastic_5fband_2eproto.base,
  &scc_info_Optimization_timed_5felastic_5fband_2eproto.base,
  &scc_info_Point2D_timed_5felastic_5fband_2eproto.base,
  &scc_info_Recovery_timed_5felastic_5fband_2eproto.base,
  &scc_info_Robot_timed_5felastic_5fband_2eproto.base,
  &scc_info_Trajectory_timed_5felastic_5fband_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_timed_5felastic_5fband_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_timed_5felastic_5fband_2eproto = {
  false, false, descriptor_table_protodef_timed_5felastic_5fband_2eproto, "timed_elastic_band.proto", 3726,
  &descriptor_table_timed_5felastic_5fband_2eproto_once, descriptor_table_timed_5felastic_5fband_2eproto_sccs, descriptor_table_timed_5felastic_5fband_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_timed_5felastic_5fband_2eproto::offsets,
  file_level_metadata_timed_5felastic_5fband_2eproto, 11, file_level_enum_descriptors_timed_5felastic_5fband_2eproto, file_level_service_descriptors_timed_5felastic_5fband_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_timed_5felastic_5fband_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_timed_5felastic_5fband_2eproto)), true);
namespace f1tenth_local_planner {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FootprintModel_FootprintType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_timed_5felastic_5fband_2eproto);
  return file_level_enum_descriptors_timed_5felastic_5fband_2eproto[0];
}
bool FootprintModel_FootprintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FootprintModel_FootprintType FootprintModel::POINT;
constexpr FootprintModel_FootprintType FootprintModel::CIRCULAR;
constexpr FootprintModel_FootprintType FootprintModel::TWOCIRCLES;
constexpr FootprintModel_FootprintType FootprintModel::LINE;
constexpr FootprintModel_FootprintType FootprintModel::POLYGON;
constexpr FootprintModel_FootprintType FootprintModel::FootprintType_MIN;
constexpr FootprintModel_FootprintType FootprintModel::FootprintType_MAX;
constexpr int FootprintModel::FootprintType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class FrameID::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameID>()._has_bits_);
  static void set_has_odom_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FrameID::FrameID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.FrameID)
}
FrameID::FrameID(const FrameID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  odom_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_odom_frame()) {
    odom_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_odom_frame(),
      GetArena());
  }
  map_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_frame()) {
    map_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_map_frame(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.FrameID)
}

void FrameID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameID_timed_5felastic_5fband_2eproto.base);
  odom_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FrameID::~FrameID() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.FrameID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  odom_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameID::ArenaDtor(void* object) {
  FrameID* _this = reinterpret_cast< FrameID* >(object);
  (void)_this;
}
void FrameID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameID& FrameID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameID_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void FrameID::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.FrameID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      odom_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      map_frame_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string odom_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_odom_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1tenth_local_planner.FrameID.odom_frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_map_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1tenth_local_planner.FrameID.map_frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.FrameID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string odom_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_odom_frame().data(), static_cast<int>(this->_internal_odom_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1tenth_local_planner.FrameID.odom_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_odom_frame(), target);
  }

  // optional string map_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_frame().data(), static_cast<int>(this->_internal_map_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1tenth_local_planner.FrameID.map_frame");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.FrameID)
  return target;
}

size_t FrameID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.FrameID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string odom_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_odom_frame());
    }

    // optional string map_frame = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_frame());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.FrameID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.FrameID)
    MergeFrom(*source);
  }
}

void FrameID::MergeFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_odom_frame(from._internal_odom_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_map_frame(from._internal_map_frame());
    }
  }
}

void FrameID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameID::CopyFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameID::IsInitialized() const {
  return true;
}

void FrameID::InternalSwap(FrameID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  odom_frame_.Swap(&other->odom_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_frame_.Swap(&other->map_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point2D::_Internal {
 public:
  using HasBits = decltype(std::declval<Point2D>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Point2D)
}

void Point2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2D& Point2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2D_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._has_bits_);
  static void set_has_teb_autosize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dt_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dt_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_global_plan_overwrite_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_init_with_backwards_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_global_plan_viapoint_sep(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_via_points_ordered(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_global_plan_lookahead_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_exact_arc_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_force_reinit_new_goal_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_feasibility_check_no_poses(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_publish_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dt_ref_, &from.dt_ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_feedback_) -
    reinterpret_cast<char*>(&dt_ref_)) + sizeof(publish_feedback_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Trajectory)
}

void Trajectory::SharedCtor() {
  ::memset(&dt_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publish_feedback_) -
      reinterpret_cast<char*>(&dt_ref_)) + sizeof(publish_feedback_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dt_ref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_global_plan_lookahead_dist_) -
        reinterpret_cast<char*>(&dt_ref_)) + sizeof(max_global_plan_lookahead_dist_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&force_reinit_new_goal_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publish_feedback_) -
        reinterpret_cast<char*>(&force_reinit_new_goal_dist_)) + sizeof(publish_feedback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool teb_autosize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teb_autosize(&has_bits);
          teb_autosize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float dt_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dt_ref(&has_bits);
          dt_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dt_hysteresis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_dt_hysteresis(&has_bits);
          dt_hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool global_plan_overwrite_orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_global_plan_overwrite_orientation(&has_bits);
          global_plan_overwrite_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_init_with_backwards_motion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_allow_init_with_backwards_motion(&has_bits);
          allow_init_with_backwards_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float global_plan_viapoint_sep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_global_plan_viapoint_sep(&has_bits);
          global_plan_viapoint_sep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool via_points_ordered = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_via_points_ordered(&has_bits);
          via_points_ordered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_global_plan_lookahead_dist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_max_global_plan_lookahead_dist(&has_bits);
          max_global_plan_lookahead_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool exact_arc_length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_exact_arc_length(&has_bits);
          exact_arc_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float force_reinit_new_goal_dist = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_force_reinit_new_goal_dist(&has_bits);
          force_reinit_new_goal_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 feasibility_check_no_poses = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_feasibility_check_no_poses(&has_bits);
          feasibility_check_no_poses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool publish_feedback = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_publish_feedback(&has_bits);
          publish_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_samples = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_samples(&has_bits);
          min_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_samples = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_samples(&has_bits);
          max_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool teb_autosize = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_teb_autosize(), target);
  }

  // optional float dt_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dt_ref(), target);
  }

  // optional float dt_hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dt_hysteresis(), target);
  }

  // optional bool global_plan_overwrite_orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_global_plan_overwrite_orientation(), target);
  }

  // optional bool allow_init_with_backwards_motion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_init_with_backwards_motion(), target);
  }

  // optional float global_plan_viapoint_sep = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_global_plan_viapoint_sep(), target);
  }

  // optional bool via_points_ordered = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_via_points_ordered(), target);
  }

  // optional float max_global_plan_lookahead_dist = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_max_global_plan_lookahead_dist(), target);
  }

  // optional bool exact_arc_length = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_exact_arc_length(), target);
  }

  // optional float force_reinit_new_goal_dist = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_force_reinit_new_goal_dist(), target);
  }

  // optional int64 feasibility_check_no_poses = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_feasibility_check_no_poses(), target);
  }

  // optional bool publish_feedback = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_publish_feedback(), target);
  }

  // optional int64 min_samples = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_min_samples(), target);
  }

  // optional int64 max_samples = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_max_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float dt_ref = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float dt_hysteresis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool teb_autosize = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool global_plan_overwrite_orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool allow_init_with_backwards_motion = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool via_points_ordered = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional float global_plan_viapoint_sep = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float max_global_plan_lookahead_dist = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float force_reinit_new_goal_dist = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int64 feasibility_check_no_poses = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_feasibility_check_no_poses());
    }

    // optional int64 min_samples = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_min_samples());
    }

    // optional int64 max_samples = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_samples());
    }

    // optional bool exact_arc_length = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool publish_feedback = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dt_ref_ = from.dt_ref_;
    }
    if (cached_has_bits & 0x00000002u) {
      dt_hysteresis_ = from.dt_hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      teb_autosize_ = from.teb_autosize_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_plan_overwrite_orientation_ = from.global_plan_overwrite_orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_init_with_backwards_motion_ = from.allow_init_with_backwards_motion_;
    }
    if (cached_has_bits & 0x00000020u) {
      via_points_ordered_ = from.via_points_ordered_;
    }
    if (cached_has_bits & 0x00000040u) {
      global_plan_viapoint_sep_ = from.global_plan_viapoint_sep_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_global_plan_lookahead_dist_ = from.max_global_plan_lookahead_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      force_reinit_new_goal_dist_ = from.force_reinit_new_goal_dist_;
    }
    if (cached_has_bits & 0x00000200u) {
      feasibility_check_no_poses_ = from.feasibility_check_no_poses_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_samples_ = from.min_samples_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_samples_ = from.max_samples_;
    }
    if (cached_has_bits & 0x00001000u) {
      exact_arc_length_ = from.exact_arc_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      publish_feedback_ = from.publish_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trajectory, publish_feedback_)
      + sizeof(Trajectory::publish_feedback_)
      - PROTOBUF_FIELD_OFFSET(Trajectory, dt_ref_)>(
          reinterpret_cast<char*>(&dt_ref_),
          reinterpret_cast<char*>(&other->dt_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FootprintModel::_Internal {
 public:
  using HasBits = decltype(std::declval<FootprintModel>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_front_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rear_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rear_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FootprintModel::FootprintModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.FootprintModel)
}
FootprintModel::FootprintModel(const FootprintModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      robot_vertices_(from.robot_vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.FootprintModel)
}

void FootprintModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FootprintModel_timed_5felastic_5fband_2eproto.base);
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(type_));
}

FootprintModel::~FootprintModel() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.FootprintModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FootprintModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FootprintModel::ArenaDtor(void* object) {
  FootprintModel* _this = reinterpret_cast< FootprintModel* >(object);
  (void)_this;
}
void FootprintModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootprintModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FootprintModel& FootprintModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FootprintModel_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void FootprintModel::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.FootprintModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_vertices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootprintModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .f1tenth_local_planner.FootprintModel.FootprintType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::f1tenth_local_planner::FootprintModel_FootprintType_IsValid(val))) {
            _internal_set_type(static_cast<::f1tenth_local_planner::FootprintModel_FootprintType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double front_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_front_offset(&has_bits);
          front_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double front_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_front_radius(&has_bits);
          front_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rear_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_rear_offset(&has_bits);
          rear_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rear_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_rear_radius(&has_bits);
          rear_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .f1tenth_local_planner.Point2D robot_vertices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FootprintModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.FootprintModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .f1tenth_local_planner.FootprintModel.FootprintType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  // optional double front_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_front_offset(), target);
  }

  // optional double front_radius = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_front_radius(), target);
  }

  // optional double rear_offset = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rear_offset(), target);
  }

  // optional double rear_radius = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_rear_radius(), target);
  }

  // repeated .f1tenth_local_planner.Point2D robot_vertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_robot_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.FootprintModel)
  return target;
}

size_t FootprintModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.FootprintModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .f1tenth_local_planner.Point2D robot_vertices = 7;
  total_size += 1UL * this->_internal_robot_vertices_size();
  for (const auto& msg : this->robot_vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double radius = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double front_offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double front_radius = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double rear_offset = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double rear_radius = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .f1tenth_local_planner.FootprintModel.FootprintType type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FootprintModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.FootprintModel)
  GOOGLE_DCHECK_NE(&from, this);
  const FootprintModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FootprintModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.FootprintModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.FootprintModel)
    MergeFrom(*source);
  }
}

void FootprintModel::MergeFrom(const FootprintModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.FootprintModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_vertices_.MergeFrom(from.robot_vertices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_offset_ = from.front_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      front_radius_ = from.front_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      rear_offset_ = from.rear_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      rear_radius_ = from.rear_radius_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FootprintModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.FootprintModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FootprintModel::CopyFrom(const FootprintModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.FootprintModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootprintModel::IsInitialized() const {
  return true;
}

void FootprintModel::InternalSwap(FootprintModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_vertices_.InternalSwap(&other->robot_vertices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootprintModel, type_)
      + sizeof(FootprintModel::type_)
      - PROTOBUF_FIELD_OFFSET(FootprintModel, radius_)>(
          reinterpret_cast<char*>(&radius_),
          reinterpret_cast<char*>(&other->radius_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootprintModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot>()._has_bits_);
  static void set_has_max_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_vel_x_backwards(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_vel_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acc_lim_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acc_lim_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acc_lim_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_turning_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wheelbase(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cmd_angle_instead_rotvel(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Robot::Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Robot)
}
Robot::Robot(const Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_vel_x_, &from.max_vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
    reinterpret_cast<char*>(&max_vel_x_)) + sizeof(cmd_angle_instead_rotvel_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Robot)
}

void Robot::SharedCtor() {
  ::memset(&max_vel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
      reinterpret_cast<char*>(&max_vel_x_)) + sizeof(cmd_angle_instead_rotvel_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Robot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robot::ArenaDtor(void* object) {
  Robot* _this = reinterpret_cast< Robot* >(object);
  (void)_this;
}
void Robot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot& Robot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&max_vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_turning_radius_) -
        reinterpret_cast<char*>(&max_vel_x_)) + sizeof(min_turning_radius_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&wheelbase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
        reinterpret_cast<char*>(&wheelbase_)) + sizeof(cmd_angle_instead_rotvel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float max_vel_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_max_vel_x(&has_bits);
          max_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_vel_x_backwards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_vel_x_backwards(&has_bits);
          max_vel_x_backwards_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_vel_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_max_vel_y(&has_bits);
          max_vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_vel_theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_vel_theta(&has_bits);
          max_vel_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc_lim_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_acc_lim_x(&has_bits);
          acc_lim_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc_lim_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_acc_lim_y(&has_bits);
          acc_lim_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float acc_lim_theta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_acc_lim_theta(&has_bits);
          acc_lim_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_turning_radius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_min_turning_radius(&has_bits);
          min_turning_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wheelbase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_wheelbase(&has_bits);
          wheelbase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cmd_angle_instead_rotvel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cmd_angle_instead_rotvel(&has_bits);
          cmd_angle_instead_rotvel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_vel_x(), target);
  }

  // optional float max_vel_x_backwards = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_vel_x_backwards(), target);
  }

  // optional float max_vel_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_vel_y(), target);
  }

  // optional float max_vel_theta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_vel_theta(), target);
  }

  // optional float acc_lim_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_acc_lim_x(), target);
  }

  // optional float acc_lim_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_acc_lim_y(), target);
  }

  // optional float acc_lim_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_acc_lim_theta(), target);
  }

  // optional float min_turning_radius = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_min_turning_radius(), target);
  }

  // optional float wheelbase = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_wheelbase(), target);
  }

  // optional bool cmd_angle_instead_rotvel = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_cmd_angle_instead_rotvel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Robot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float max_vel_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_vel_x_backwards = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float max_vel_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_vel_theta = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_theta = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float min_turning_radius = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float wheelbase = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional bool cmd_angle_instead_rotvel = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Robot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_vel_x_ = from.max_vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_vel_x_backwards_ = from.max_vel_x_backwards_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_vel_y_ = from.max_vel_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_vel_theta_ = from.max_vel_theta_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lim_x_ = from.acc_lim_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lim_y_ = from.acc_lim_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lim_theta_ = from.acc_lim_theta_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_turning_radius_ = from.min_turning_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      wheelbase_ = from.wheelbase_;
    }
    if (cached_has_bits & 0x00000200u) {
      cmd_angle_instead_rotvel_ = from.cmd_angle_instead_rotvel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  return true;
}

void Robot::InternalSwap(Robot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot, cmd_angle_instead_rotvel_)
      + sizeof(Robot::cmd_angle_instead_rotvel_)
      - PROTOBUF_FIELD_OFFSET(Robot, max_vel_x_)>(
          reinterpret_cast<char*>(&max_vel_x_),
          reinterpret_cast<char*>(&other->max_vel_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GoalTolerance::_Internal {
 public:
  using HasBits = decltype(std::declval<GoalTolerance>()._has_bits_);
  static void set_has_xy_goal_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yaw_goal_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free_goal_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GoalTolerance::GoalTolerance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.GoalTolerance)
}
GoalTolerance::GoalTolerance(const GoalTolerance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xy_goal_tolerance_, &from.xy_goal_tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_goal_vel_) -
    reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.GoalTolerance)
}

void GoalTolerance::SharedCtor() {
  ::memset(&xy_goal_tolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_goal_vel_) -
      reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
}

GoalTolerance::~GoalTolerance() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.GoalTolerance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GoalTolerance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GoalTolerance::ArenaDtor(void* object) {
  GoalTolerance* _this = reinterpret_cast< GoalTolerance* >(object);
  (void)_this;
}
void GoalTolerance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoalTolerance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoalTolerance& GoalTolerance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoalTolerance_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void GoalTolerance::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.GoalTolerance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&xy_goal_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free_goal_vel_) -
        reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoalTolerance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float xy_goal_tolerance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_xy_goal_tolerance(&has_bits);
          xy_goal_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_goal_tolerance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_yaw_goal_tolerance(&has_bits);
          yaw_goal_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool free_goal_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_free_goal_vel(&has_bits);
          free_goal_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoalTolerance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.GoalTolerance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xy_goal_tolerance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_xy_goal_tolerance(), target);
  }

  // optional float yaw_goal_tolerance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw_goal_tolerance(), target);
  }

  // optional bool free_goal_vel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_free_goal_vel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.GoalTolerance)
  return target;
}

size_t GoalTolerance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.GoalTolerance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float xy_goal_tolerance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float yaw_goal_tolerance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool free_goal_vel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoalTolerance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.GoalTolerance)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalTolerance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoalTolerance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.GoalTolerance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.GoalTolerance)
    MergeFrom(*source);
  }
}

void GoalTolerance::MergeFrom(const GoalTolerance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.GoalTolerance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      xy_goal_tolerance_ = from.xy_goal_tolerance_;
    }
    if (cached_has_bits & 0x00000002u) {
      yaw_goal_tolerance_ = from.yaw_goal_tolerance_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_goal_vel_ = from.free_goal_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoalTolerance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.GoalTolerance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalTolerance::CopyFrom(const GoalTolerance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.GoalTolerance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalTolerance::IsInitialized() const {
  return true;
}

void GoalTolerance::InternalSwap(GoalTolerance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GoalTolerance, free_goal_vel_)
      + sizeof(GoalTolerance::free_goal_vel_)
      - PROTOBUF_FIELD_OFFSET(GoalTolerance, xy_goal_tolerance_)>(
          reinterpret_cast<char*>(&xy_goal_tolerance_),
          reinterpret_cast<char*>(&other->xy_goal_tolerance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GoalTolerance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Obstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<Obstacles>()._has_bits_);
  static void set_has_min_obstacle_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inflation_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_include_costmap_obstacles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_costmap_obstacles_behind_robot_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_obstacle_poses_affected(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_legacy_obstacle_association(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_obstacle_association_cutoff_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_obstacle_association_force_inclusion_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_costmap_converter_plugin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_costmap_converter_spin_thread(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_costmap_converter_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Obstacles::Obstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  costmap_converter_plugin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_costmap_converter_plugin()) {
    costmap_converter_plugin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_costmap_converter_plugin(),
      GetArena());
  }
  ::memcpy(&min_obstacle_dist_, &from.min_obstacle_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&costmap_converter_rate_) -
    reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(costmap_converter_rate_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Obstacles)
}

void Obstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacles_timed_5felastic_5fband_2eproto.base);
  costmap_converter_plugin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_obstacle_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&costmap_converter_rate_) -
      reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(costmap_converter_rate_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Obstacles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  costmap_converter_plugin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Obstacles::ArenaDtor(void* object) {
  Obstacles* _this = reinterpret_cast< Obstacles* >(object);
  (void)_this;
}
void Obstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacles& Obstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacles_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    costmap_converter_plugin_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&min_obstacle_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&costmap_converter_spin_thread_) -
        reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(costmap_converter_spin_thread_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&obstacle_association_cutoff_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&costmap_converter_rate_) -
        reinterpret_cast<char*>(&obstacle_association_cutoff_factor_)) + sizeof(costmap_converter_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_obstacle_dist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_obstacle_dist(&has_bits);
          min_obstacle_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float inflation_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_inflation_dist(&has_bits);
          inflation_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool include_costmap_obstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_costmap_obstacles(&has_bits);
          include_costmap_obstacles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float costmap_obstacles_behind_robot_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_costmap_obstacles_behind_robot_dist(&has_bits);
          costmap_obstacles_behind_robot_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float obstacle_poses_affected = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_obstacle_poses_affected(&has_bits);
          obstacle_poses_affected_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool legacy_obstacle_association = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_legacy_obstacle_association(&has_bits);
          legacy_obstacle_association_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float obstacle_association_cutoff_factor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_obstacle_association_cutoff_factor(&has_bits);
          obstacle_association_cutoff_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float obstacle_association_force_inclusion_factor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_obstacle_association_force_inclusion_factor(&has_bits);
          obstacle_association_force_inclusion_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string costmap_converter_plugin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_costmap_converter_plugin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1tenth_local_planner.Obstacles.costmap_converter_plugin");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool costmap_converter_spin_thread = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_costmap_converter_spin_thread(&has_bits);
          costmap_converter_spin_thread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float costmap_converter_rate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_costmap_converter_rate(&has_bits);
          costmap_converter_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_obstacle_dist = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_obstacle_dist(), target);
  }

  // optional float inflation_dist = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_inflation_dist(), target);
  }

  // optional bool include_costmap_obstacles = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_costmap_obstacles(), target);
  }

  // optional float costmap_obstacles_behind_robot_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_costmap_obstacles_behind_robot_dist(), target);
  }

  // optional float obstacle_poses_affected = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_obstacle_poses_affected(), target);
  }

  // optional bool legacy_obstacle_association = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_legacy_obstacle_association(), target);
  }

  // optional float obstacle_association_cutoff_factor = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_obstacle_association_cutoff_factor(), target);
  }

  // optional float obstacle_association_force_inclusion_factor = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_obstacle_association_force_inclusion_factor(), target);
  }

  // optional string costmap_converter_plugin = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_costmap_converter_plugin().data(), static_cast<int>(this->_internal_costmap_converter_plugin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1tenth_local_planner.Obstacles.costmap_converter_plugin");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_costmap_converter_plugin(), target);
  }

  // optional bool costmap_converter_spin_thread = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_costmap_converter_spin_thread(), target);
  }

  // optional float costmap_converter_rate = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_costmap_converter_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Obstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string costmap_converter_plugin = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_costmap_converter_plugin());
    }

    // optional float min_obstacle_dist = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float inflation_dist = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float costmap_obstacles_behind_robot_dist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float obstacle_poses_affected = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool include_costmap_obstacles = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool legacy_obstacle_association = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool costmap_converter_spin_thread = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float obstacle_association_cutoff_factor = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float obstacle_association_force_inclusion_factor = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float costmap_converter_rate = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Obstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_costmap_converter_plugin(from._internal_costmap_converter_plugin());
    }
    if (cached_has_bits & 0x00000002u) {
      min_obstacle_dist_ = from.min_obstacle_dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      inflation_dist_ = from.inflation_dist_;
    }
    if (cached_has_bits & 0x00000008u) {
      costmap_obstacles_behind_robot_dist_ = from.costmap_obstacles_behind_robot_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacle_poses_affected_ = from.obstacle_poses_affected_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_costmap_obstacles_ = from.include_costmap_obstacles_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_obstacle_association_ = from.legacy_obstacle_association_;
    }
    if (cached_has_bits & 0x00000080u) {
      costmap_converter_spin_thread_ = from.costmap_converter_spin_thread_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      obstacle_association_cutoff_factor_ = from.obstacle_association_cutoff_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      obstacle_association_force_inclusion_factor_ = from.obstacle_association_force_inclusion_factor_;
    }
    if (cached_has_bits & 0x00000400u) {
      costmap_converter_rate_ = from.costmap_converter_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  costmap_converter_plugin_.Swap(&other->costmap_converter_plugin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacles, costmap_converter_rate_)
      + sizeof(Obstacles::costmap_converter_rate_)
      - PROTOBUF_FIELD_OFFSET(Obstacles, min_obstacle_dist_)>(
          reinterpret_cast<char*>(&min_obstacle_dist_),
          reinterpret_cast<char*>(&other->min_obstacle_dist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Optimization::_Internal {
 public:
  using HasBits = decltype(std::declval<Optimization>()._has_bits_);
  static void set_has_no_inner_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_outer_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_optimization_activate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optimization_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_penalty_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_max_vel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_max_vel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_max_vel_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight_acc_lim_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_weight_acc_lim_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight_acc_lim_thet(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_weight_kinematics_nh(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weight_kinematics_forward_drive(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_weight_kinematics_turning_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_weight_optimaltime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_weight_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_weight_inflation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_weight_dynamic_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_weight_viapoint(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_weight_adapt_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_weight_prefer_rotdir(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_weight_acc_lim_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

Optimization::Optimization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Optimization)
}
Optimization::Optimization(const Optimization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&no_inner_iterations_, &from.no_inner_iterations_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_acc_lim_theta_) -
    reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_acc_lim_theta_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Optimization)
}

void Optimization::SharedCtor() {
  ::memset(&no_inner_iterations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_acc_lim_theta_) -
      reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_acc_lim_theta_));
}

Optimization::~Optimization() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Optimization)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Optimization::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Optimization::ArenaDtor(void* object) {
  Optimization* _this = reinterpret_cast< Optimization* >(object);
  (void)_this;
}
void Optimization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Optimization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Optimization& Optimization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Optimization_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Optimization::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Optimization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&no_inner_iterations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_max_vel_theta_) -
        reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_max_vel_theta_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&weight_acc_lim_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_obstacle_) -
        reinterpret_cast<char*>(&weight_acc_lim_x_)) + sizeof(weight_obstacle_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&weight_inflation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_acc_lim_theta_) -
        reinterpret_cast<char*>(&weight_inflation_)) + sizeof(weight_acc_lim_theta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Optimization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 no_inner_iterations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_no_inner_iterations(&has_bits);
          no_inner_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 no_outer_iterations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_no_outer_iterations(&has_bits);
          no_outer_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optimization_activate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_optimization_activate(&has_bits);
          optimization_activate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optimization_verbose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_optimization_verbose(&has_bits);
          optimization_verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float penalty_epsilon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_penalty_epsilon(&has_bits);
          penalty_epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_max_vel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_weight_max_vel_x(&has_bits);
          weight_max_vel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_max_vel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_weight_max_vel_y(&has_bits);
          weight_max_vel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_max_vel_theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_weight_max_vel_theta(&has_bits);
          weight_max_vel_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_acc_lim_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_weight_acc_lim_x(&has_bits);
          weight_acc_lim_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_acc_lim_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_weight_acc_lim_y(&has_bits);
          weight_acc_lim_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_acc_lim_thet = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_weight_acc_lim_thet(&has_bits);
          weight_acc_lim_thet_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_kinematics_nh = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_weight_kinematics_nh(&has_bits);
          weight_kinematics_nh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_kinematics_forward_drive = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_weight_kinematics_forward_drive(&has_bits);
          weight_kinematics_forward_drive_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_kinematics_turning_radius = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_weight_kinematics_turning_radius(&has_bits);
          weight_kinematics_turning_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_optimaltime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_weight_optimaltime(&has_bits);
          weight_optimaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_obstacle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_weight_obstacle(&has_bits);
          weight_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_inflation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_weight_inflation(&has_bits);
          weight_inflation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_dynamic_obstacle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_weight_dynamic_obstacle(&has_bits);
          weight_dynamic_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_viapoint = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_weight_viapoint(&has_bits);
          weight_viapoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_adapt_factor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_weight_adapt_factor(&has_bits);
          weight_adapt_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_prefer_rotdir = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_weight_prefer_rotdir(&has_bits);
          weight_prefer_rotdir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight_acc_lim_theta = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_weight_acc_lim_theta(&has_bits);
          weight_acc_lim_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Optimization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Optimization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 no_inner_iterations = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_no_inner_iterations(), target);
  }

  // optional int32 no_outer_iterations = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_no_outer_iterations(), target);
  }

  // optional bool optimization_activate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_optimization_activate(), target);
  }

  // optional bool optimization_verbose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_optimization_verbose(), target);
  }

  // optional float penalty_epsilon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_penalty_epsilon(), target);
  }

  // optional float weight_max_vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_weight_max_vel_x(), target);
  }

  // optional float weight_max_vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_weight_max_vel_y(), target);
  }

  // optional float weight_max_vel_theta = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_weight_max_vel_theta(), target);
  }

  // optional float weight_acc_lim_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_weight_acc_lim_x(), target);
  }

  // optional float weight_acc_lim_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_weight_acc_lim_y(), target);
  }

  // optional float weight_acc_lim_thet = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_weight_acc_lim_thet(), target);
  }

  // optional float weight_kinematics_nh = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_weight_kinematics_nh(), target);
  }

  // optional float weight_kinematics_forward_drive = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_weight_kinematics_forward_drive(), target);
  }

  // optional float weight_kinematics_turning_radius = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_weight_kinematics_turning_radius(), target);
  }

  // optional float weight_optimaltime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_weight_optimaltime(), target);
  }

  // optional float weight_obstacle = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_weight_obstacle(), target);
  }

  // optional float weight_inflation = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_weight_inflation(), target);
  }

  // optional float weight_dynamic_obstacle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_weight_dynamic_obstacle(), target);
  }

  // optional float weight_viapoint = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_weight_viapoint(), target);
  }

  // optional float weight_adapt_factor = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_weight_adapt_factor(), target);
  }

  // optional float weight_prefer_rotdir = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_weight_prefer_rotdir(), target);
  }

  // optional float weight_acc_lim_theta = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_weight_acc_lim_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Optimization)
  return target;
}

size_t Optimization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Optimization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 no_inner_iterations = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_no_inner_iterations());
    }

    // optional int32 no_outer_iterations = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_no_outer_iterations());
    }

    // optional bool optimization_activate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool optimization_verbose = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float penalty_epsilon = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_theta = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float weight_acc_lim_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float weight_acc_lim_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float weight_acc_lim_thet = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_nh = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_forward_drive = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_turning_radius = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float weight_optimaltime = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float weight_obstacle = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional float weight_inflation = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float weight_dynamic_obstacle = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float weight_viapoint = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float weight_adapt_factor = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float weight_prefer_rotdir = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float weight_acc_lim_theta = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Optimization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Optimization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Optimization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Optimization)
    MergeFrom(*source);
  }
}

void Optimization::MergeFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      no_inner_iterations_ = from.no_inner_iterations_;
    }
    if (cached_has_bits & 0x00000002u) {
      no_outer_iterations_ = from.no_outer_iterations_;
    }
    if (cached_has_bits & 0x00000004u) {
      optimization_activate_ = from.optimization_activate_;
    }
    if (cached_has_bits & 0x00000008u) {
      optimization_verbose_ = from.optimization_verbose_;
    }
    if (cached_has_bits & 0x00000010u) {
      penalty_epsilon_ = from.penalty_epsilon_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_max_vel_x_ = from.weight_max_vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_max_vel_y_ = from.weight_max_vel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_max_vel_theta_ = from.weight_max_vel_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      weight_acc_lim_x_ = from.weight_acc_lim_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_acc_lim_y_ = from.weight_acc_lim_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_acc_lim_thet_ = from.weight_acc_lim_thet_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_kinematics_nh_ = from.weight_kinematics_nh_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_kinematics_forward_drive_ = from.weight_kinematics_forward_drive_;
    }
    if (cached_has_bits & 0x00002000u) {
      weight_kinematics_turning_radius_ = from.weight_kinematics_turning_radius_;
    }
    if (cached_has_bits & 0x00004000u) {
      weight_optimaltime_ = from.weight_optimaltime_;
    }
    if (cached_has_bits & 0x00008000u) {
      weight_obstacle_ = from.weight_obstacle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      weight_inflation_ = from.weight_inflation_;
    }
    if (cached_has_bits & 0x00020000u) {
      weight_dynamic_obstacle_ = from.weight_dynamic_obstacle_;
    }
    if (cached_has_bits & 0x00040000u) {
      weight_viapoint_ = from.weight_viapoint_;
    }
    if (cached_has_bits & 0x00080000u) {
      weight_adapt_factor_ = from.weight_adapt_factor_;
    }
    if (cached_has_bits & 0x00100000u) {
      weight_prefer_rotdir_ = from.weight_prefer_rotdir_;
    }
    if (cached_has_bits & 0x00200000u) {
      weight_acc_lim_theta_ = from.weight_acc_lim_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Optimization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimization::CopyFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimization::IsInitialized() const {
  return true;
}

void Optimization::InternalSwap(Optimization* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Optimization, weight_acc_lim_theta_)
      + sizeof(Optimization::weight_acc_lim_theta_)
      - PROTOBUF_FIELD_OFFSET(Optimization, no_inner_iterations_)>(
          reinterpret_cast<char*>(&no_inner_iterations_),
          reinterpret_cast<char*>(&other->no_inner_iterations_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Optimization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HomotopyClassPlanner::_Internal {
 public:
  using HasBits = decltype(std::declval<HomotopyClassPlanner>()._has_bits_);
  static void set_has_enable_homotopy_class_planning(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_multithreading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_simple_exploration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_number_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_selection_obst_cost_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_selection_prefer_initial_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_selection_viapoint_cost_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_selection_cost_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_selection_alternative_time_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_roadmap_graph_no_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_roadmap_graph_area_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_roadmap_graph_area_length_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_h_signature_prescaler(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_h_signature_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_obstacle_keypoint_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_obstacle_heading_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_viapoints_all_candidates(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_visualize_hc_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

HomotopyClassPlanner::HomotopyClassPlanner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.HomotopyClassPlanner)
}
HomotopyClassPlanner::HomotopyClassPlanner(const HomotopyClassPlanner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_homotopy_class_planning_, &from.enable_homotopy_class_planning_,
    static_cast<size_t>(reinterpret_cast<char*>(&visualize_hc_graph_) -
    reinterpret_cast<char*>(&enable_homotopy_class_planning_)) + sizeof(visualize_hc_graph_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.HomotopyClassPlanner)
}

void HomotopyClassPlanner::SharedCtor() {
  ::memset(&enable_homotopy_class_planning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visualize_hc_graph_) -
      reinterpret_cast<char*>(&enable_homotopy_class_planning_)) + sizeof(visualize_hc_graph_));
}

HomotopyClassPlanner::~HomotopyClassPlanner() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.HomotopyClassPlanner)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HomotopyClassPlanner::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HomotopyClassPlanner::ArenaDtor(void* object) {
  HomotopyClassPlanner* _this = reinterpret_cast< HomotopyClassPlanner* >(object);
  (void)_this;
}
void HomotopyClassPlanner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HomotopyClassPlanner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HomotopyClassPlanner& HomotopyClassPlanner::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HomotopyClassPlanner_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void HomotopyClassPlanner::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.HomotopyClassPlanner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enable_homotopy_class_planning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_viapoint_cost_scale_) -
        reinterpret_cast<char*>(&enable_homotopy_class_planning_)) + sizeof(selection_viapoint_cost_scale_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&selection_cost_hysteresis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_heading_threshold_) -
        reinterpret_cast<char*>(&selection_cost_hysteresis_)) + sizeof(obstacle_heading_threshold_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&viapoints_all_candidates_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visualize_hc_graph_) -
        reinterpret_cast<char*>(&viapoints_all_candidates_)) + sizeof(visualize_hc_graph_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HomotopyClassPlanner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_homotopy_class_planning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_homotopy_class_planning(&has_bits);
          enable_homotopy_class_planning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_multithreading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_multithreading(&has_bits);
          enable_multithreading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool simple_exploration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_simple_exploration(&has_bits);
          simple_exploration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_classes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_number_classes(&has_bits);
          max_number_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float selection_obst_cost_scale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_selection_obst_cost_scale(&has_bits);
          selection_obst_cost_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float selection_prefer_initial_plan = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_selection_prefer_initial_plan(&has_bits);
          selection_prefer_initial_plan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float selection_viapoint_cost_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_selection_viapoint_cost_scale(&has_bits);
          selection_viapoint_cost_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float selection_cost_hysteresis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_selection_cost_hysteresis(&has_bits);
          selection_cost_hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool selection_alternative_time_cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_selection_alternative_time_cost(&has_bits);
          selection_alternative_time_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roadmap_graph_no_samples = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_roadmap_graph_no_samples(&has_bits);
          roadmap_graph_no_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roadmap_graph_area_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_roadmap_graph_area_width(&has_bits);
          roadmap_graph_area_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float roadmap_graph_area_length_scale = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_roadmap_graph_area_length_scale(&has_bits);
          roadmap_graph_area_length_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_signature_prescaler = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_h_signature_prescaler(&has_bits);
          h_signature_prescaler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h_signature_threshold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_h_signature_threshold(&has_bits);
          h_signature_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float obstacle_keypoint_offset = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_obstacle_keypoint_offset(&has_bits);
          obstacle_keypoint_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float obstacle_heading_threshold = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_obstacle_heading_threshold(&has_bits);
          obstacle_heading_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool viapoints_all_candidates = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_viapoints_all_candidates(&has_bits);
          viapoints_all_candidates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool visualize_hc_graph = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_visualize_hc_graph(&has_bits);
          visualize_hc_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HomotopyClassPlanner::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.HomotopyClassPlanner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_homotopy_class_planning = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_homotopy_class_planning(), target);
  }

  // optional bool enable_multithreading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_multithreading(), target);
  }

  // optional bool simple_exploration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_simple_exploration(), target);
  }

  // optional int32 max_number_classes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_number_classes(), target);
  }

  // optional float selection_obst_cost_scale = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_selection_obst_cost_scale(), target);
  }

  // optional float selection_prefer_initial_plan = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_selection_prefer_initial_plan(), target);
  }

  // optional float selection_viapoint_cost_scale = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_selection_viapoint_cost_scale(), target);
  }

  // optional float selection_cost_hysteresis = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_selection_cost_hysteresis(), target);
  }

  // optional bool selection_alternative_time_cost = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_selection_alternative_time_cost(), target);
  }

  // optional int32 roadmap_graph_no_samples = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_roadmap_graph_no_samples(), target);
  }

  // optional int32 roadmap_graph_area_width = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_roadmap_graph_area_width(), target);
  }

  // optional float roadmap_graph_area_length_scale = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_roadmap_graph_area_length_scale(), target);
  }

  // optional float h_signature_prescaler = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_h_signature_prescaler(), target);
  }

  // optional float h_signature_threshold = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_h_signature_threshold(), target);
  }

  // optional float obstacle_keypoint_offset = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_obstacle_keypoint_offset(), target);
  }

  // optional float obstacle_heading_threshold = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_obstacle_heading_threshold(), target);
  }

  // optional bool viapoints_all_candidates = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_viapoints_all_candidates(), target);
  }

  // optional bool visualize_hc_graph = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_visualize_hc_graph(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.HomotopyClassPlanner)
  return target;
}

size_t HomotopyClassPlanner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.HomotopyClassPlanner)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enable_homotopy_class_planning = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_multithreading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool simple_exploration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool selection_alternative_time_cost = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 max_number_classes = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_classes());
    }

    // optional float selection_obst_cost_scale = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float selection_prefer_initial_plan = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float selection_viapoint_cost_scale = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float selection_cost_hysteresis = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 roadmap_graph_no_samples = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roadmap_graph_no_samples());
    }

    // optional int32 roadmap_graph_area_width = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roadmap_graph_area_width());
    }

    // optional float roadmap_graph_area_length_scale = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float h_signature_prescaler = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float h_signature_threshold = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float obstacle_keypoint_offset = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float obstacle_heading_threshold = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool viapoints_all_candidates = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool visualize_hc_graph = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomotopyClassPlanner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.HomotopyClassPlanner)
  GOOGLE_DCHECK_NE(&from, this);
  const HomotopyClassPlanner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HomotopyClassPlanner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.HomotopyClassPlanner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.HomotopyClassPlanner)
    MergeFrom(*source);
  }
}

void HomotopyClassPlanner::MergeFrom(const HomotopyClassPlanner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.HomotopyClassPlanner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enable_homotopy_class_planning_ = from.enable_homotopy_class_planning_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_multithreading_ = from.enable_multithreading_;
    }
    if (cached_has_bits & 0x00000004u) {
      simple_exploration_ = from.simple_exploration_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_alternative_time_cost_ = from.selection_alternative_time_cost_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_number_classes_ = from.max_number_classes_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_obst_cost_scale_ = from.selection_obst_cost_scale_;
    }
    if (cached_has_bits & 0x00000040u) {
      selection_prefer_initial_plan_ = from.selection_prefer_initial_plan_;
    }
    if (cached_has_bits & 0x00000080u) {
      selection_viapoint_cost_scale_ = from.selection_viapoint_cost_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      selection_cost_hysteresis_ = from.selection_cost_hysteresis_;
    }
    if (cached_has_bits & 0x00000200u) {
      roadmap_graph_no_samples_ = from.roadmap_graph_no_samples_;
    }
    if (cached_has_bits & 0x00000400u) {
      roadmap_graph_area_width_ = from.roadmap_graph_area_width_;
    }
    if (cached_has_bits & 0x00000800u) {
      roadmap_graph_area_length_scale_ = from.roadmap_graph_area_length_scale_;
    }
    if (cached_has_bits & 0x00001000u) {
      h_signature_prescaler_ = from.h_signature_prescaler_;
    }
    if (cached_has_bits & 0x00002000u) {
      h_signature_threshold_ = from.h_signature_threshold_;
    }
    if (cached_has_bits & 0x00004000u) {
      obstacle_keypoint_offset_ = from.obstacle_keypoint_offset_;
    }
    if (cached_has_bits & 0x00008000u) {
      obstacle_heading_threshold_ = from.obstacle_heading_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      viapoints_all_candidates_ = from.viapoints_all_candidates_;
    }
    if (cached_has_bits & 0x00020000u) {
      visualize_hc_graph_ = from.visualize_hc_graph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HomotopyClassPlanner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.HomotopyClassPlanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomotopyClassPlanner::CopyFrom(const HomotopyClassPlanner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.HomotopyClassPlanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomotopyClassPlanner::IsInitialized() const {
  return true;
}

void HomotopyClassPlanner::InternalSwap(HomotopyClassPlanner* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HomotopyClassPlanner, visualize_hc_graph_)
      + sizeof(HomotopyClassPlanner::visualize_hc_graph_)
      - PROTOBUF_FIELD_OFFSET(HomotopyClassPlanner, enable_homotopy_class_planning_)>(
          reinterpret_cast<char*>(&enable_homotopy_class_planning_),
          reinterpret_cast<char*>(&other->enable_homotopy_class_planning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HomotopyClassPlanner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Recovery::_Internal {
 public:
  using HasBits = decltype(std::declval<Recovery>()._has_bits_);
  static void set_has_shrink_horizon_min_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_oscillation_recovery(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shrink_horizon_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_oscillation_v_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oscillation_omega_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oscillation_recovery_min_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oscillation_filter_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Recovery::Recovery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Recovery)
}
Recovery::Recovery(const Recovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&oscillation_v_eps_, &from.oscillation_v_eps_,
    static_cast<size_t>(reinterpret_cast<char*>(&shrink_horizon_backup_) -
    reinterpret_cast<char*>(&oscillation_v_eps_)) + sizeof(shrink_horizon_backup_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Recovery)
}

void Recovery::SharedCtor() {
  ::memset(&oscillation_v_eps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shrink_horizon_backup_) -
      reinterpret_cast<char*>(&oscillation_v_eps_)) + sizeof(shrink_horizon_backup_));
}

Recovery::~Recovery() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Recovery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Recovery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Recovery::ArenaDtor(void* object) {
  Recovery* _this = reinterpret_cast< Recovery* >(object);
  (void)_this;
}
void Recovery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Recovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Recovery& Recovery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Recovery_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Recovery::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Recovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&oscillation_v_eps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shrink_horizon_backup_) -
        reinterpret_cast<char*>(&oscillation_v_eps_)) + sizeof(shrink_horizon_backup_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Recovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool shrink_horizon_min_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shrink_horizon_min_duration(&has_bits);
          shrink_horizon_min_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool oscillation_recovery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_oscillation_recovery(&has_bits);
          oscillation_recovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shrink_horizon_backup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shrink_horizon_backup(&has_bits);
          shrink_horizon_backup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double oscillation_v_eps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_oscillation_v_eps(&has_bits);
          oscillation_v_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double oscillation_omega_eps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_oscillation_omega_eps(&has_bits);
          oscillation_omega_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double oscillation_recovery_min_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_oscillation_recovery_min_duration(&has_bits);
          oscillation_recovery_min_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double oscillation_filter_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_oscillation_filter_duration(&has_bits);
          oscillation_filter_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Recovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Recovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool shrink_horizon_min_duration = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_shrink_horizon_min_duration(), target);
  }

  // optional bool oscillation_recovery = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_oscillation_recovery(), target);
  }

  // optional bool shrink_horizon_backup = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_shrink_horizon_backup(), target);
  }

  // optional double oscillation_v_eps = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_oscillation_v_eps(), target);
  }

  // optional double oscillation_omega_eps = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_oscillation_omega_eps(), target);
  }

  // optional double oscillation_recovery_min_duration = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_oscillation_recovery_min_duration(), target);
  }

  // optional double oscillation_filter_duration = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_oscillation_filter_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Recovery)
  return target;
}

size_t Recovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Recovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double oscillation_v_eps = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double oscillation_omega_eps = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double oscillation_recovery_min_duration = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double oscillation_filter_duration = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool shrink_horizon_min_duration = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool oscillation_recovery = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool shrink_horizon_backup = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Recovery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Recovery)
  GOOGLE_DCHECK_NE(&from, this);
  const Recovery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Recovery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Recovery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Recovery)
    MergeFrom(*source);
  }
}

void Recovery::MergeFrom(const Recovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Recovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      oscillation_v_eps_ = from.oscillation_v_eps_;
    }
    if (cached_has_bits & 0x00000002u) {
      oscillation_omega_eps_ = from.oscillation_omega_eps_;
    }
    if (cached_has_bits & 0x00000004u) {
      oscillation_recovery_min_duration_ = from.oscillation_recovery_min_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      oscillation_filter_duration_ = from.oscillation_filter_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      shrink_horizon_min_duration_ = from.shrink_horizon_min_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      oscillation_recovery_ = from.oscillation_recovery_;
    }
    if (cached_has_bits & 0x00000040u) {
      shrink_horizon_backup_ = from.shrink_horizon_backup_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Recovery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Recovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recovery::CopyFrom(const Recovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Recovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recovery::IsInitialized() const {
  return true;
}

void Recovery::InternalSwap(Recovery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Recovery, shrink_horizon_backup_)
      + sizeof(Recovery::shrink_horizon_backup_)
      - PROTOBUF_FIELD_OFFSET(Recovery, oscillation_v_eps_)>(
          reinterpret_cast<char*>(&oscillation_v_eps_),
          reinterpret_cast<char*>(&other->oscillation_v_eps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Recovery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static const ::f1tenth_local_planner::FrameID& opt_frame(const Config* msg);
  static void set_has_opt_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::f1tenth_local_planner::Trajectory& trajectory_opt(const Config* msg);
  static void set_has_trajectory_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::f1tenth_local_planner::Robot& kinematics_opt(const Config* msg);
  static void set_has_kinematics_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::f1tenth_local_planner::GoalTolerance& tolerance_opt(const Config* msg);
  static void set_has_tolerance_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::f1tenth_local_planner::Obstacles& obstacles_opt(const Config* msg);
  static void set_has_obstacles_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::f1tenth_local_planner::Optimization& optimize_info(const Config* msg);
  static void set_has_optimize_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::f1tenth_local_planner::HomotopyClassPlanner& hcp_opt(const Config* msg);
  static void set_has_hcp_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::f1tenth_local_planner::Recovery& recovery_info(const Config* msg);
  static void set_has_recovery_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::f1tenth_local_planner::FrameID&
Config::_Internal::opt_frame(const Config* msg) {
  return *msg->opt_frame_;
}
const ::f1tenth_local_planner::Trajectory&
Config::_Internal::trajectory_opt(const Config* msg) {
  return *msg->trajectory_opt_;
}
const ::f1tenth_local_planner::Robot&
Config::_Internal::kinematics_opt(const Config* msg) {
  return *msg->kinematics_opt_;
}
const ::f1tenth_local_planner::GoalTolerance&
Config::_Internal::tolerance_opt(const Config* msg) {
  return *msg->tolerance_opt_;
}
const ::f1tenth_local_planner::Obstacles&
Config::_Internal::obstacles_opt(const Config* msg) {
  return *msg->obstacles_opt_;
}
const ::f1tenth_local_planner::Optimization&
Config::_Internal::optimize_info(const Config* msg) {
  return *msg->optimize_info_;
}
const ::f1tenth_local_planner::HomotopyClassPlanner&
Config::_Internal::hcp_opt(const Config* msg) {
  return *msg->hcp_opt_;
}
const ::f1tenth_local_planner::Recovery&
Config::_Internal::recovery_info(const Config* msg) {
  return *msg->recovery_info_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_local_planner.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      robot_type_(from.robot_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_opt_frame()) {
    opt_frame_ = new ::f1tenth_local_planner::FrameID(*from.opt_frame_);
  } else {
    opt_frame_ = nullptr;
  }
  if (from._internal_has_trajectory_opt()) {
    trajectory_opt_ = new ::f1tenth_local_planner::Trajectory(*from.trajectory_opt_);
  } else {
    trajectory_opt_ = nullptr;
  }
  if (from._internal_has_kinematics_opt()) {
    kinematics_opt_ = new ::f1tenth_local_planner::Robot(*from.kinematics_opt_);
  } else {
    kinematics_opt_ = nullptr;
  }
  if (from._internal_has_tolerance_opt()) {
    tolerance_opt_ = new ::f1tenth_local_planner::GoalTolerance(*from.tolerance_opt_);
  } else {
    tolerance_opt_ = nullptr;
  }
  if (from._internal_has_obstacles_opt()) {
    obstacles_opt_ = new ::f1tenth_local_planner::Obstacles(*from.obstacles_opt_);
  } else {
    obstacles_opt_ = nullptr;
  }
  if (from._internal_has_optimize_info()) {
    optimize_info_ = new ::f1tenth_local_planner::Optimization(*from.optimize_info_);
  } else {
    optimize_info_ = nullptr;
  }
  if (from._internal_has_hcp_opt()) {
    hcp_opt_ = new ::f1tenth_local_planner::HomotopyClassPlanner(*from.hcp_opt_);
  } else {
    hcp_opt_ = nullptr;
  }
  if (from._internal_has_recovery_info()) {
    recovery_info_ = new ::f1tenth_local_planner::Recovery(*from.recovery_info_);
  } else {
    recovery_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:f1tenth_local_planner.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_timed_5felastic_5fband_2eproto.base);
  ::memset(&opt_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recovery_info_) -
      reinterpret_cast<char*>(&opt_frame_)) + sizeof(recovery_info_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:f1tenth_local_planner.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete opt_frame_;
  if (this != internal_default_instance()) delete trajectory_opt_;
  if (this != internal_default_instance()) delete kinematics_opt_;
  if (this != internal_default_instance()) delete tolerance_opt_;
  if (this != internal_default_instance()) delete obstacles_opt_;
  if (this != internal_default_instance()) delete optimize_info_;
  if (this != internal_default_instance()) delete hcp_opt_;
  if (this != internal_default_instance()) delete recovery_info_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_timed_5felastic_5fband_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_local_planner.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(opt_frame_ != nullptr);
      opt_frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_opt_ != nullptr);
      trajectory_opt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kinematics_opt_ != nullptr);
      kinematics_opt_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tolerance_opt_ != nullptr);
      tolerance_opt_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(obstacles_opt_ != nullptr);
      obstacles_opt_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optimize_info_ != nullptr);
      optimize_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hcp_opt_ != nullptr);
      hcp_opt_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(recovery_info_ != nullptr);
      recovery_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .f1tenth_local_planner.FrameID opt_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_opt_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.Trajectory trajectory_opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.Robot kinematics_opt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kinematics_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.GoalTolerance tolerance_opt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tolerance_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.Obstacles obstacles_opt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacles_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.Optimization optimize_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimize_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.HomotopyClassPlanner hcp_opt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_hcp_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .f1tenth_local_planner.FootprintModel robot_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .f1tenth_local_planner.Recovery recovery_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_recovery_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_local_planner.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .f1tenth_local_planner.FrameID opt_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::opt_frame(this), target, stream);
  }

  // optional .f1tenth_local_planner.Trajectory trajectory_opt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trajectory_opt(this), target, stream);
  }

  // optional .f1tenth_local_planner.Robot kinematics_opt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kinematics_opt(this), target, stream);
  }

  // optional .f1tenth_local_planner.GoalTolerance tolerance_opt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tolerance_opt(this), target, stream);
  }

  // optional .f1tenth_local_planner.Obstacles obstacles_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::obstacles_opt(this), target, stream);
  }

  // optional .f1tenth_local_planner.Optimization optimize_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::optimize_info(this), target, stream);
  }

  // optional .f1tenth_local_planner.HomotopyClassPlanner hcp_opt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::hcp_opt(this), target, stream);
  }

  // repeated .f1tenth_local_planner.FootprintModel robot_type = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_robot_type(i), target, stream);
  }

  // optional .f1tenth_local_planner.Recovery recovery_info = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::recovery_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_local_planner.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_local_planner.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .f1tenth_local_planner.FootprintModel robot_type = 8;
  total_size += 1UL * this->_internal_robot_type_size();
  for (const auto& msg : this->robot_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .f1tenth_local_planner.FrameID opt_frame = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *opt_frame_);
    }

    // optional .f1tenth_local_planner.Trajectory trajectory_opt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_opt_);
    }

    // optional .f1tenth_local_planner.Robot kinematics_opt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kinematics_opt_);
    }

    // optional .f1tenth_local_planner.GoalTolerance tolerance_opt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tolerance_opt_);
    }

    // optional .f1tenth_local_planner.Obstacles obstacles_opt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obstacles_opt_);
    }

    // optional .f1tenth_local_planner.Optimization optimize_info = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optimize_info_);
    }

    // optional .f1tenth_local_planner.HomotopyClassPlanner hcp_opt = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hcp_opt_);
    }

    // optional .f1tenth_local_planner.Recovery recovery_info = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recovery_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_local_planner.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_local_planner.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_local_planner.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_local_planner.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_type_.MergeFrom(from.robot_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_opt_frame()->::f1tenth_local_planner::FrameID::MergeFrom(from._internal_opt_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trajectory_opt()->::f1tenth_local_planner::Trajectory::MergeFrom(from._internal_trajectory_opt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kinematics_opt()->::f1tenth_local_planner::Robot::MergeFrom(from._internal_kinematics_opt());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tolerance_opt()->::f1tenth_local_planner::GoalTolerance::MergeFrom(from._internal_tolerance_opt());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_obstacles_opt()->::f1tenth_local_planner::Obstacles::MergeFrom(from._internal_obstacles_opt());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_optimize_info()->::f1tenth_local_planner::Optimization::MergeFrom(from._internal_optimize_info());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_hcp_opt()->::f1tenth_local_planner::HomotopyClassPlanner::MergeFrom(from._internal_hcp_opt());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_recovery_info()->::f1tenth_local_planner::Recovery::MergeFrom(from._internal_recovery_info());
    }
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_local_planner.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_local_planner.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_type_.InternalSwap(&other->robot_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, recovery_info_)
      + sizeof(Config::recovery_info_)
      - PROTOBUF_FIELD_OFFSET(Config, opt_frame_)>(
          reinterpret_cast<char*>(&opt_frame_),
          reinterpret_cast<char*>(&other->opt_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace f1tenth_local_planner
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::FrameID* Arena::CreateMaybeMessage< ::f1tenth_local_planner::FrameID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::FrameID >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Point2D* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Trajectory* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::FootprintModel* Arena::CreateMaybeMessage< ::f1tenth_local_planner::FootprintModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::FootprintModel >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Robot* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Robot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Robot >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::GoalTolerance* Arena::CreateMaybeMessage< ::f1tenth_local_planner::GoalTolerance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::GoalTolerance >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Obstacles* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Obstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Obstacles >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Optimization* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Optimization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Optimization >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::HomotopyClassPlanner* Arena::CreateMaybeMessage< ::f1tenth_local_planner::HomotopyClassPlanner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::HomotopyClassPlanner >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Recovery* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Recovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Recovery >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_local_planner::Config* Arena::CreateMaybeMessage< ::f1tenth_local_planner::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_local_planner::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
