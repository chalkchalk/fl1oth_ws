// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_planner_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_global_5fplanner_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_global_5fplanner_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_global_5fplanner_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_global_5fplanner_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_global_5fplanner_5fconfig_2eproto;
namespace f1tenth_global_planner {
class GlobalPlannerConfig;
class GlobalPlannerConfigDefaultTypeInternal;
extern GlobalPlannerConfigDefaultTypeInternal _GlobalPlannerConfig_default_instance_;
}  // namespace f1tenth_global_planner
PROTOBUF_NAMESPACE_OPEN
template<> ::f1tenth_global_planner::GlobalPlannerConfig* Arena::CreateMaybeMessage<::f1tenth_global_planner::GlobalPlannerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1tenth_global_planner {

// ===================================================================

class GlobalPlannerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1tenth_global_planner.GlobalPlannerConfig) */ {
 public:
  inline GlobalPlannerConfig() : GlobalPlannerConfig(nullptr) {}
  virtual ~GlobalPlannerConfig();

  GlobalPlannerConfig(const GlobalPlannerConfig& from);
  GlobalPlannerConfig(GlobalPlannerConfig&& from) noexcept
    : GlobalPlannerConfig() {
    *this = ::std::move(from);
  }

  inline GlobalPlannerConfig& operator=(const GlobalPlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalPlannerConfig& operator=(GlobalPlannerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalPlannerConfig& default_instance();

  static inline const GlobalPlannerConfig* internal_default_instance() {
    return reinterpret_cast<const GlobalPlannerConfig*>(
               &_GlobalPlannerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlobalPlannerConfig& a, GlobalPlannerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalPlannerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalPlannerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalPlannerConfig* New() const final {
    return CreateMaybeMessage<GlobalPlannerConfig>(nullptr);
  }

  GlobalPlannerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalPlannerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalPlannerConfig& from);
  void MergeFrom(const GlobalPlannerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalPlannerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1tenth_global_planner.GlobalPlannerConfig";
  }
  protected:
  explicit GlobalPlannerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_global_5fplanner_5fconfig_2eproto);
    return ::descriptor_table_global_5fplanner_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSelectedAlgorithmFieldNumber = 2,
    kFrequencyFieldNumber = 3,
    kMaxRetriesFieldNumber = 4,
    kGoalDistanceToleranceFieldNumber = 5,
    kGoalAngleToleranceFieldNumber = 6,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // optional string selected_algorithm = 2;
  bool has_selected_algorithm() const;
  private:
  bool _internal_has_selected_algorithm() const;
  public:
  void clear_selected_algorithm();
  const std::string& selected_algorithm() const;
  void set_selected_algorithm(const std::string& value);
  void set_selected_algorithm(std::string&& value);
  void set_selected_algorithm(const char* value);
  void set_selected_algorithm(const char* value, size_t size);
  std::string* mutable_selected_algorithm();
  std::string* release_selected_algorithm();
  void set_allocated_selected_algorithm(std::string* selected_algorithm);
  private:
  const std::string& _internal_selected_algorithm() const;
  void _internal_set_selected_algorithm(const std::string& value);
  std::string* _internal_mutable_selected_algorithm();
  public:

  // required int32 frequency = 3;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 max_retries = 4;
  bool has_max_retries() const;
  private:
  bool _internal_has_max_retries() const;
  public:
  void clear_max_retries();
  ::PROTOBUF_NAMESPACE_ID::int32 max_retries() const;
  void set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_retries() const;
  void _internal_set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required double goal_distance_tolerance = 5;
  bool has_goal_distance_tolerance() const;
  private:
  bool _internal_has_goal_distance_tolerance() const;
  public:
  void clear_goal_distance_tolerance();
  double goal_distance_tolerance() const;
  void set_goal_distance_tolerance(double value);
  private:
  double _internal_goal_distance_tolerance() const;
  void _internal_set_goal_distance_tolerance(double value);
  public:

  // required double goal_angle_tolerance = 6;
  bool has_goal_angle_tolerance() const;
  private:
  bool _internal_has_goal_angle_tolerance() const;
  public:
  void clear_goal_angle_tolerance();
  double goal_angle_tolerance() const;
  void set_goal_angle_tolerance(double value);
  private:
  double _internal_goal_angle_tolerance() const;
  void _internal_set_goal_angle_tolerance(double value);
  public:

  // @@protoc_insertion_point(class_scope:f1tenth_global_planner.GlobalPlannerConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_retries_;
  double goal_distance_tolerance_;
  double goal_angle_tolerance_;
  friend struct ::TableStruct_global_5fplanner_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalPlannerConfig

// repeated string name = 1;
inline int GlobalPlannerConfig::_internal_name_size() const {
  return name_.size();
}
inline int GlobalPlannerConfig::name_size() const {
  return _internal_name_size();
}
inline void GlobalPlannerConfig::clear_name() {
  name_.Clear();
}
inline std::string* GlobalPlannerConfig::add_name() {
  // @@protoc_insertion_point(field_add_mutable:f1tenth_global_planner.GlobalPlannerConfig.name)
  return _internal_add_name();
}
inline const std::string& GlobalPlannerConfig::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& GlobalPlannerConfig::name(int index) const {
  // @@protoc_insertion_point(field_get:f1tenth_global_planner.GlobalPlannerConfig.name)
  return _internal_name(index);
}
inline std::string* GlobalPlannerConfig::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:f1tenth_global_planner.GlobalPlannerConfig.name)
  return name_.Mutable(index);
}
inline void GlobalPlannerConfig::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.name)
  name_.Mutable(index)->assign(value);
}
inline void GlobalPlannerConfig::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void GlobalPlannerConfig::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:f1tenth_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:f1tenth_global_planner.GlobalPlannerConfig.name)
}
inline std::string* GlobalPlannerConfig::_internal_add_name() {
  return name_.Add();
}
inline void GlobalPlannerConfig::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:f1tenth_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:f1tenth_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:f1tenth_global_planner.GlobalPlannerConfig.name)
}
inline void GlobalPlannerConfig::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:f1tenth_global_planner.GlobalPlannerConfig.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GlobalPlannerConfig::name() const {
  // @@protoc_insertion_point(field_list:f1tenth_global_planner.GlobalPlannerConfig.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GlobalPlannerConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:f1tenth_global_planner.GlobalPlannerConfig.name)
  return &name_;
}

// optional string selected_algorithm = 2;
inline bool GlobalPlannerConfig::_internal_has_selected_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GlobalPlannerConfig::has_selected_algorithm() const {
  return _internal_has_selected_algorithm();
}
inline void GlobalPlannerConfig::clear_selected_algorithm() {
  selected_algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GlobalPlannerConfig::selected_algorithm() const {
  // @@protoc_insertion_point(field_get:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
  return _internal_selected_algorithm();
}
inline void GlobalPlannerConfig::set_selected_algorithm(const std::string& value) {
  _internal_set_selected_algorithm(value);
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline std::string* GlobalPlannerConfig::mutable_selected_algorithm() {
  // @@protoc_insertion_point(field_mutable:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
  return _internal_mutable_selected_algorithm();
}
inline const std::string& GlobalPlannerConfig::_internal_selected_algorithm() const {
  return selected_algorithm_.Get();
}
inline void GlobalPlannerConfig::_internal_set_selected_algorithm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  selected_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GlobalPlannerConfig::set_selected_algorithm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  selected_algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline void GlobalPlannerConfig::set_selected_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  selected_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline void GlobalPlannerConfig::set_selected_algorithm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  selected_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
}
inline std::string* GlobalPlannerConfig::_internal_mutable_selected_algorithm() {
  _has_bits_[0] |= 0x00000001u;
  return selected_algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GlobalPlannerConfig::release_selected_algorithm() {
  // @@protoc_insertion_point(field_release:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
  if (!_internal_has_selected_algorithm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return selected_algorithm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalPlannerConfig::set_allocated_selected_algorithm(std::string* selected_algorithm) {
  if (selected_algorithm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selected_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selected_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1tenth_global_planner.GlobalPlannerConfig.selected_algorithm)
}

// required int32 frequency = 3;
inline bool GlobalPlannerConfig::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GlobalPlannerConfig::has_frequency() const {
  return _internal_has_frequency();
}
inline void GlobalPlannerConfig::clear_frequency() {
  frequency_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalPlannerConfig::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalPlannerConfig::frequency() const {
  // @@protoc_insertion_point(field_get:f1tenth_global_planner.GlobalPlannerConfig.frequency)
  return _internal_frequency();
}
inline void GlobalPlannerConfig::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  frequency_ = value;
}
inline void GlobalPlannerConfig::set_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.frequency)
}

// required int32 max_retries = 4;
inline bool GlobalPlannerConfig::_internal_has_max_retries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GlobalPlannerConfig::has_max_retries() const {
  return _internal_has_max_retries();
}
inline void GlobalPlannerConfig::clear_max_retries() {
  max_retries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalPlannerConfig::_internal_max_retries() const {
  return max_retries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlobalPlannerConfig::max_retries() const {
  // @@protoc_insertion_point(field_get:f1tenth_global_planner.GlobalPlannerConfig.max_retries)
  return _internal_max_retries();
}
inline void GlobalPlannerConfig::_internal_set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_retries_ = value;
}
inline void GlobalPlannerConfig::set_max_retries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_retries(value);
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.max_retries)
}

// required double goal_distance_tolerance = 5;
inline bool GlobalPlannerConfig::_internal_has_goal_distance_tolerance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GlobalPlannerConfig::has_goal_distance_tolerance() const {
  return _internal_has_goal_distance_tolerance();
}
inline void GlobalPlannerConfig::clear_goal_distance_tolerance() {
  goal_distance_tolerance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GlobalPlannerConfig::_internal_goal_distance_tolerance() const {
  return goal_distance_tolerance_;
}
inline double GlobalPlannerConfig::goal_distance_tolerance() const {
  // @@protoc_insertion_point(field_get:f1tenth_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
  return _internal_goal_distance_tolerance();
}
inline void GlobalPlannerConfig::_internal_set_goal_distance_tolerance(double value) {
  _has_bits_[0] |= 0x00000008u;
  goal_distance_tolerance_ = value;
}
inline void GlobalPlannerConfig::set_goal_distance_tolerance(double value) {
  _internal_set_goal_distance_tolerance(value);
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
}

// required double goal_angle_tolerance = 6;
inline bool GlobalPlannerConfig::_internal_has_goal_angle_tolerance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GlobalPlannerConfig::has_goal_angle_tolerance() const {
  return _internal_has_goal_angle_tolerance();
}
inline void GlobalPlannerConfig::clear_goal_angle_tolerance() {
  goal_angle_tolerance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GlobalPlannerConfig::_internal_goal_angle_tolerance() const {
  return goal_angle_tolerance_;
}
inline double GlobalPlannerConfig::goal_angle_tolerance() const {
  // @@protoc_insertion_point(field_get:f1tenth_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
  return _internal_goal_angle_tolerance();
}
inline void GlobalPlannerConfig::_internal_set_goal_angle_tolerance(double value) {
  _has_bits_[0] |= 0x00000010u;
  goal_angle_tolerance_ = value;
}
inline void GlobalPlannerConfig::set_goal_angle_tolerance(double value) {
  _internal_set_goal_angle_tolerance(value);
  // @@protoc_insertion_point(field_set:f1tenth_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace f1tenth_global_planner

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_global_5fplanner_5fconfig_2eproto
