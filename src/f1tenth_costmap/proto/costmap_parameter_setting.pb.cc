// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: costmap_parameter_setting.proto

#include "costmap_parameter_setting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_costmap_5fparameter_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Footprint_costmap_5fparameter_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_costmap_5fparameter_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_costmap_5fparameter_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_costmap_5fparameter_5fsetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_costmap_5fparameter_5fsetting_2eproto;
namespace f1tenth_costmap {
class ParaBasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParaBasic> _instance;
} _ParaBasic_default_instance_;
class ParaCostmapInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParaCostmapInterface> _instance;
} _ParaCostmapInterface_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class FootprintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Footprint> _instance;
} _Footprint_default_instance_;
class ParaCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParaCollection> _instance;
} _ParaCollection_default_instance_;
}  // namespace f1tenth_costmap
static void InitDefaultsscc_info_Footprint_costmap_5fparameter_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_costmap::_Footprint_default_instance_;
    new (ptr) ::f1tenth_costmap::Footprint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Footprint_costmap_5fparameter_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Footprint_costmap_5fparameter_5fsetting_2eproto}, {
      &scc_info_Point_costmap_5fparameter_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_costmap::_ParaBasic_default_instance_;
    new (ptr) ::f1tenth_costmap::ParaBasic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto}, {}};

static void InitDefaultsscc_info_ParaCollection_costmap_5fparameter_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_costmap::_ParaCollection_default_instance_;
    new (ptr) ::f1tenth_costmap::ParaCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ParaCollection_costmap_5fparameter_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ParaCollection_costmap_5fparameter_5fsetting_2eproto}, {
      &scc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto.base,
      &scc_info_Footprint_costmap_5fparameter_5fsetting_2eproto.base,
      &scc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto.base,}};

static void InitDefaultsscc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_costmap::_ParaCostmapInterface_default_instance_;
    new (ptr) ::f1tenth_costmap::ParaCostmapInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto}, {}};

static void InitDefaultsscc_info_Point_costmap_5fparameter_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1tenth_costmap::_Point_default_instance_;
    new (ptr) ::f1tenth_costmap::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_costmap_5fparameter_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_costmap_5fparameter_5fsetting_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_costmap_5fparameter_5fsetting_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_costmap_5fparameter_5fsetting_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_costmap_5fparameter_5fsetting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_costmap_5fparameter_5fsetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaBasic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaBasic, is_raw_rosmessage_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaBasic, is_debug_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, global_frame_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, robot_base_frame_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, footprint_padding_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, transform_tolerance_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, distance_threshold_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, map_width_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, map_height_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, map_origin_x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, map_origin_y_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, map_resolution_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, is_tracking_unknown_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, is_rolling_window_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, has_obstacle_layer_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, has_static_layer_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, inflation_file_path_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCostmapInterface, map_update_frequency_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  13,
  14,
  15,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::Point, x_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::Point, y_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::Footprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::Footprint, point_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCollection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCollection, para_costmap_interface_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCollection, footprint_),
  PROTOBUF_FIELD_OFFSET(::f1tenth_costmap::ParaCollection, para_basic_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::f1tenth_costmap::ParaBasic)},
  { 9, 30, sizeof(::f1tenth_costmap::ParaCostmapInterface)},
  { 46, 53, sizeof(::f1tenth_costmap::Point)},
  { 55, -1, sizeof(::f1tenth_costmap::Footprint)},
  { 61, 69, sizeof(::f1tenth_costmap::ParaCollection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_costmap::_ParaBasic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_costmap::_ParaCostmapInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_costmap::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_costmap::_Footprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1tenth_costmap::_ParaCollection_default_instance_),
};

const char descriptor_table_protodef_costmap_5fparameter_5fsetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037costmap_parameter_setting.proto\022\017f1ten"
  "th_costmap\"8\n\tParaBasic\022\031\n\021is_raw_rosmes"
  "sage\030\001 \002(\010\022\020\n\010is_debug\030\002 \001(\010\"\256\003\n\024ParaCos"
  "tmapInterface\022\024\n\014global_frame\030\001 \002(\t\022\030\n\020r"
  "obot_base_frame\030\002 \002(\t\022\031\n\021footprint_paddi"
  "ng\030\003 \002(\001\022\033\n\023transform_tolerance\030\004 \002(\001\022\032\n"
  "\022distance_threshold\030\005 \002(\001\022\021\n\tmap_width\030\006"
  " \002(\001\022\022\n\nmap_height\030\007 \002(\001\022\024\n\014map_origin_x"
  "\030\010 \002(\001\022\024\n\014map_origin_y\030\t \002(\001\022\026\n\016map_reso"
  "lution\030\n \002(\001\022\033\n\023is_tracking_unknown\030\013 \002("
  "\010\022\031\n\021is_rolling_window\030\014 \002(\010\022\032\n\022has_obst"
  "acle_layer\030\r \002(\010\022\030\n\020has_static_layer\030\016 \002"
  "(\010\022\033\n\023inflation_file_path\030\017 \002(\t\022\034\n\024map_u"
  "pdate_frequency\030\020 \002(\001\"\035\n\005Point\022\t\n\001x\030\001 \002("
  "\001\022\t\n\001y\030\002 \002(\001\"2\n\tFootprint\022%\n\005point\030\001 \003(\013"
  "2\026.f1tenth_costmap.Point\"\266\001\n\016ParaCollect"
  "ion\022E\n\026para_costmap_interface\030\001 \002(\0132%.f1"
  "tenth_costmap.ParaCostmapInterface\022-\n\tfo"
  "otprint\030\002 \002(\0132\032.f1tenth_costmap.Footprin"
  "t\022.\n\npara_basic\030\003 \002(\0132\032.f1tenth_costmap."
  "ParaBasic"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_costmap_5fparameter_5fsetting_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_costmap_5fparameter_5fsetting_2eproto_sccs[5] = {
  &scc_info_Footprint_costmap_5fparameter_5fsetting_2eproto.base,
  &scc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto.base,
  &scc_info_ParaCollection_costmap_5fparameter_5fsetting_2eproto.base,
  &scc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto.base,
  &scc_info_Point_costmap_5fparameter_5fsetting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_costmap_5fparameter_5fsetting_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_costmap_5fparameter_5fsetting_2eproto = {
  false, false, descriptor_table_protodef_costmap_5fparameter_5fsetting_2eproto, "costmap_parameter_setting.proto", 809,
  &descriptor_table_costmap_5fparameter_5fsetting_2eproto_once, descriptor_table_costmap_5fparameter_5fsetting_2eproto_sccs, descriptor_table_costmap_5fparameter_5fsetting_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_costmap_5fparameter_5fsetting_2eproto::offsets,
  file_level_metadata_costmap_5fparameter_5fsetting_2eproto, 5, file_level_enum_descriptors_costmap_5fparameter_5fsetting_2eproto, file_level_service_descriptors_costmap_5fparameter_5fsetting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_costmap_5fparameter_5fsetting_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_costmap_5fparameter_5fsetting_2eproto)), true);
namespace f1tenth_costmap {

// ===================================================================

class ParaBasic::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaBasic>()._has_bits_);
  static void set_has_is_raw_rosmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ParaBasic::ParaBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_costmap.ParaBasic)
}
ParaBasic::ParaBasic(const ParaBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_raw_rosmessage_, &from.is_raw_rosmessage_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_debug_) -
    reinterpret_cast<char*>(&is_raw_rosmessage_)) + sizeof(is_debug_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_costmap.ParaBasic)
}

void ParaBasic::SharedCtor() {
  ::memset(&is_raw_rosmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_debug_) -
      reinterpret_cast<char*>(&is_raw_rosmessage_)) + sizeof(is_debug_));
}

ParaBasic::~ParaBasic() {
  // @@protoc_insertion_point(destructor:f1tenth_costmap.ParaBasic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParaBasic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParaBasic::ArenaDtor(void* object) {
  ParaBasic* _this = reinterpret_cast< ParaBasic* >(object);
  (void)_this;
}
void ParaBasic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParaBasic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParaBasic& ParaBasic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParaBasic_costmap_5fparameter_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void ParaBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_costmap.ParaBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_raw_rosmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_debug_) -
      reinterpret_cast<char*>(&is_raw_rosmessage_)) + sizeof(is_debug_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaBasic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool is_raw_rosmessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_raw_rosmessage(&has_bits);
          is_raw_rosmessage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_debug(&has_bits);
          is_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParaBasic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_costmap.ParaBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_raw_rosmessage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_raw_rosmessage(), target);
  }

  // optional bool is_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_costmap.ParaBasic)
  return target;
}

size_t ParaBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_costmap.ParaBasic)
  size_t total_size = 0;

  // required bool is_raw_rosmessage = 1;
  if (_internal_has_is_raw_rosmessage()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_debug = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParaBasic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_costmap.ParaBasic)
  GOOGLE_DCHECK_NE(&from, this);
  const ParaBasic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParaBasic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_costmap.ParaBasic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_costmap.ParaBasic)
    MergeFrom(*source);
  }
}

void ParaBasic::MergeFrom(const ParaBasic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_costmap.ParaBasic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is_raw_rosmessage_ = from.is_raw_rosmessage_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_debug_ = from.is_debug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParaBasic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_costmap.ParaBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaBasic::CopyFrom(const ParaBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_costmap.ParaBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaBasic::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ParaBasic::InternalSwap(ParaBasic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaBasic, is_debug_)
      + sizeof(ParaBasic::is_debug_)
      - PROTOBUF_FIELD_OFFSET(ParaBasic, is_raw_rosmessage_)>(
          reinterpret_cast<char*>(&is_raw_rosmessage_),
          reinterpret_cast<char*>(&other->is_raw_rosmessage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaBasic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParaCostmapInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaCostmapInterface>()._has_bits_);
  static void set_has_global_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_base_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_footprint_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transform_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distance_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_map_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_map_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_map_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_map_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_tracking_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_rolling_window(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_has_obstacle_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_has_static_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_inflation_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_update_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000ffff) ^ 0x0000ffff) != 0;
  }
};

ParaCostmapInterface::ParaCostmapInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_costmap.ParaCostmapInterface)
}
ParaCostmapInterface::ParaCostmapInterface(const ParaCostmapInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  global_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_global_frame()) {
    global_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_frame(),
      GetArena());
  }
  robot_base_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_robot_base_frame()) {
    robot_base_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_base_frame(),
      GetArena());
  }
  inflation_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inflation_file_path()) {
    inflation_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inflation_file_path(),
      GetArena());
  }
  ::memcpy(&footprint_padding_, &from.footprint_padding_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_static_layer_) -
    reinterpret_cast<char*>(&footprint_padding_)) + sizeof(has_static_layer_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_costmap.ParaCostmapInterface)
}

void ParaCostmapInterface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto.base);
  global_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_base_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inflation_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&footprint_padding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_static_layer_) -
      reinterpret_cast<char*>(&footprint_padding_)) + sizeof(has_static_layer_));
}

ParaCostmapInterface::~ParaCostmapInterface() {
  // @@protoc_insertion_point(destructor:f1tenth_costmap.ParaCostmapInterface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParaCostmapInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  global_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_base_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inflation_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParaCostmapInterface::ArenaDtor(void* object) {
  ParaCostmapInterface* _this = reinterpret_cast< ParaCostmapInterface* >(object);
  (void)_this;
}
void ParaCostmapInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParaCostmapInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParaCostmapInterface& ParaCostmapInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParaCostmapInterface_costmap_5fparameter_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void ParaCostmapInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_costmap.ParaCostmapInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      global_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      robot_base_frame_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      inflation_file_path_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&footprint_padding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_height_) -
        reinterpret_cast<char*>(&footprint_padding_)) + sizeof(map_height_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&map_origin_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_static_layer_) -
        reinterpret_cast<char*>(&map_origin_x_)) + sizeof(has_static_layer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaCostmapInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string global_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_global_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1tenth_costmap.ParaCostmapInterface.global_frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string robot_base_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_robot_base_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1tenth_costmap.ParaCostmapInterface.robot_base_frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double footprint_padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_footprint_padding(&has_bits);
          footprint_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double transform_tolerance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_transform_tolerance(&has_bits);
          transform_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double distance_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_distance_threshold(&has_bits);
          distance_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_map_width(&has_bits);
          map_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_map_height(&has_bits);
          map_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_origin_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_map_origin_x(&has_bits);
          map_origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_origin_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_map_origin_y(&has_bits);
          map_origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double map_resolution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_map_resolution(&has_bits);
          map_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool is_tracking_unknown = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_tracking_unknown(&has_bits);
          is_tracking_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_rolling_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_rolling_window(&has_bits);
          is_rolling_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool has_obstacle_layer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_has_obstacle_layer(&has_bits);
          has_obstacle_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool has_static_layer = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_has_static_layer(&has_bits);
          has_static_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string inflation_file_path = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_inflation_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1tenth_costmap.ParaCostmapInterface.inflation_file_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double map_update_frequency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_map_update_frequency(&has_bits);
          map_update_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParaCostmapInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_costmap.ParaCostmapInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string global_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_global_frame().data(), static_cast<int>(this->_internal_global_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1tenth_costmap.ParaCostmapInterface.global_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_global_frame(), target);
  }

  // required string robot_base_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_robot_base_frame().data(), static_cast<int>(this->_internal_robot_base_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1tenth_costmap.ParaCostmapInterface.robot_base_frame");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_robot_base_frame(), target);
  }

  // required double footprint_padding = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_footprint_padding(), target);
  }

  // required double transform_tolerance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_transform_tolerance(), target);
  }

  // required double distance_threshold = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_distance_threshold(), target);
  }

  // required double map_width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_map_width(), target);
  }

  // required double map_height = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_map_height(), target);
  }

  // required double map_origin_x = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_map_origin_x(), target);
  }

  // required double map_origin_y = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_map_origin_y(), target);
  }

  // required double map_resolution = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_map_resolution(), target);
  }

  // required bool is_tracking_unknown = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_tracking_unknown(), target);
  }

  // required bool is_rolling_window = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_rolling_window(), target);
  }

  // required bool has_obstacle_layer = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_has_obstacle_layer(), target);
  }

  // required bool has_static_layer = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_has_static_layer(), target);
  }

  // required string inflation_file_path = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inflation_file_path().data(), static_cast<int>(this->_internal_inflation_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1tenth_costmap.ParaCostmapInterface.inflation_file_path");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_inflation_file_path(), target);
  }

  // required double map_update_frequency = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_map_update_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_costmap.ParaCostmapInterface)
  return target;
}

size_t ParaCostmapInterface::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:f1tenth_costmap.ParaCostmapInterface)
  size_t total_size = 0;

  if (_internal_has_global_frame()) {
    // required string global_frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_frame());
  }

  if (_internal_has_robot_base_frame()) {
    // required string robot_base_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_base_frame());
  }

  if (_internal_has_inflation_file_path()) {
    // required string inflation_file_path = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inflation_file_path());
  }

  if (_internal_has_footprint_padding()) {
    // required double footprint_padding = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_transform_tolerance()) {
    // required double transform_tolerance = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_distance_threshold()) {
    // required double distance_threshold = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_map_width()) {
    // required double map_width = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_map_height()) {
    // required double map_height = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_map_origin_x()) {
    // required double map_origin_x = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_map_origin_y()) {
    // required double map_origin_y = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_map_resolution()) {
    // required double map_resolution = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_map_update_frequency()) {
    // required double map_update_frequency = 16;
    total_size += 2 + 8;
  }

  if (_internal_has_is_tracking_unknown()) {
    // required bool is_tracking_unknown = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_is_rolling_window()) {
    // required bool is_rolling_window = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_has_obstacle_layer()) {
    // required bool has_obstacle_layer = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_has_static_layer()) {
    // required bool has_static_layer = 14;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ParaCostmapInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_costmap.ParaCostmapInterface)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required string global_frame = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_global_frame());

    // required string robot_base_frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_base_frame());

    // required string inflation_file_path = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inflation_file_path());

    // required double footprint_padding = 3;
    total_size += 1 + 8;

    // required double transform_tolerance = 4;
    total_size += 1 + 8;

    // required double distance_threshold = 5;
    total_size += 1 + 8;

    // required double map_width = 6;
    total_size += 1 + 8;

    // required double map_height = 7;
    total_size += 1 + 8;

    // required double map_origin_x = 8;
    total_size += 1 + 8;

    // required double map_origin_y = 9;
    total_size += 1 + 8;

    // required double map_resolution = 10;
    total_size += 1 + 8;

    // required double map_update_frequency = 16;
    total_size += 2 + 8;

    // required bool is_tracking_unknown = 11;
    total_size += 1 + 1;

    // required bool is_rolling_window = 12;
    total_size += 1 + 1;

    // required bool has_obstacle_layer = 13;
    total_size += 1 + 1;

    // required bool has_static_layer = 14;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParaCostmapInterface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_costmap.ParaCostmapInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const ParaCostmapInterface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParaCostmapInterface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_costmap.ParaCostmapInterface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_costmap.ParaCostmapInterface)
    MergeFrom(*source);
  }
}

void ParaCostmapInterface::MergeFrom(const ParaCostmapInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_costmap.ParaCostmapInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_global_frame(from._internal_global_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_robot_base_frame(from._internal_robot_base_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_inflation_file_path(from._internal_inflation_file_path());
    }
    if (cached_has_bits & 0x00000008u) {
      footprint_padding_ = from.footprint_padding_;
    }
    if (cached_has_bits & 0x00000010u) {
      transform_tolerance_ = from.transform_tolerance_;
    }
    if (cached_has_bits & 0x00000020u) {
      distance_threshold_ = from.distance_threshold_;
    }
    if (cached_has_bits & 0x00000040u) {
      map_width_ = from.map_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      map_height_ = from.map_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      map_origin_x_ = from.map_origin_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      map_origin_y_ = from.map_origin_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      map_resolution_ = from.map_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      map_update_frequency_ = from.map_update_frequency_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_tracking_unknown_ = from.is_tracking_unknown_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_rolling_window_ = from.is_rolling_window_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_obstacle_layer_ = from.has_obstacle_layer_;
    }
    if (cached_has_bits & 0x00008000u) {
      has_static_layer_ = from.has_static_layer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParaCostmapInterface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_costmap.ParaCostmapInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaCostmapInterface::CopyFrom(const ParaCostmapInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_costmap.ParaCostmapInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaCostmapInterface::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ParaCostmapInterface::InternalSwap(ParaCostmapInterface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  global_frame_.Swap(&other->global_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  robot_base_frame_.Swap(&other->robot_base_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inflation_file_path_.Swap(&other->inflation_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaCostmapInterface, has_static_layer_)
      + sizeof(ParaCostmapInterface::has_static_layer_)
      - PROTOBUF_FIELD_OFFSET(ParaCostmapInterface, footprint_padding_)>(
          reinterpret_cast<char*>(&footprint_padding_),
          reinterpret_cast<char*>(&other->footprint_padding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaCostmapInterface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_costmap.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:f1tenth_costmap.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:f1tenth_costmap.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_costmap_5fparameter_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_costmap.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_costmap.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_costmap.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:f1tenth_costmap.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_costmap.Point)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_costmap.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_costmap.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_costmap.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_costmap.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_costmap.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_costmap.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Footprint::_Internal {
 public:
};

Footprint::Footprint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_costmap.Footprint)
}
Footprint::Footprint(const Footprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:f1tenth_costmap.Footprint)
}

void Footprint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Footprint_costmap_5fparameter_5fsetting_2eproto.base);
}

Footprint::~Footprint() {
  // @@protoc_insertion_point(destructor:f1tenth_costmap.Footprint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Footprint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Footprint::ArenaDtor(void* object) {
  Footprint* _this = reinterpret_cast< Footprint* >(object);
  (void)_this;
}
void Footprint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Footprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Footprint& Footprint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Footprint_costmap_5fparameter_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void Footprint::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_costmap.Footprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Footprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .f1tenth_costmap.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Footprint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_costmap.Footprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .f1tenth_costmap.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_costmap.Footprint)
  return target;
}

size_t Footprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_costmap.Footprint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .f1tenth_costmap.Point point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Footprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_costmap.Footprint)
  GOOGLE_DCHECK_NE(&from, this);
  const Footprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Footprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_costmap.Footprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_costmap.Footprint)
    MergeFrom(*source);
  }
}

void Footprint::MergeFrom(const Footprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_costmap.Footprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void Footprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_costmap.Footprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footprint::CopyFrom(const Footprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_costmap.Footprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footprint::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(point_)) return false;
  return true;
}

void Footprint::InternalSwap(Footprint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  point_.InternalSwap(&other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Footprint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParaCollection::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaCollection>()._has_bits_);
  static const ::f1tenth_costmap::ParaCostmapInterface& para_costmap_interface(const ParaCollection* msg);
  static void set_has_para_costmap_interface(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::f1tenth_costmap::Footprint& footprint(const ParaCollection* msg);
  static void set_has_footprint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::f1tenth_costmap::ParaBasic& para_basic(const ParaCollection* msg);
  static void set_has_para_basic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::f1tenth_costmap::ParaCostmapInterface&
ParaCollection::_Internal::para_costmap_interface(const ParaCollection* msg) {
  return *msg->para_costmap_interface_;
}
const ::f1tenth_costmap::Footprint&
ParaCollection::_Internal::footprint(const ParaCollection* msg) {
  return *msg->footprint_;
}
const ::f1tenth_costmap::ParaBasic&
ParaCollection::_Internal::para_basic(const ParaCollection* msg) {
  return *msg->para_basic_;
}
ParaCollection::ParaCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1tenth_costmap.ParaCollection)
}
ParaCollection::ParaCollection(const ParaCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_para_costmap_interface()) {
    para_costmap_interface_ = new ::f1tenth_costmap::ParaCostmapInterface(*from.para_costmap_interface_);
  } else {
    para_costmap_interface_ = nullptr;
  }
  if (from._internal_has_footprint()) {
    footprint_ = new ::f1tenth_costmap::Footprint(*from.footprint_);
  } else {
    footprint_ = nullptr;
  }
  if (from._internal_has_para_basic()) {
    para_basic_ = new ::f1tenth_costmap::ParaBasic(*from.para_basic_);
  } else {
    para_basic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:f1tenth_costmap.ParaCollection)
}

void ParaCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParaCollection_costmap_5fparameter_5fsetting_2eproto.base);
  ::memset(&para_costmap_interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&para_basic_) -
      reinterpret_cast<char*>(&para_costmap_interface_)) + sizeof(para_basic_));
}

ParaCollection::~ParaCollection() {
  // @@protoc_insertion_point(destructor:f1tenth_costmap.ParaCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParaCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete para_costmap_interface_;
  if (this != internal_default_instance()) delete footprint_;
  if (this != internal_default_instance()) delete para_basic_;
}

void ParaCollection::ArenaDtor(void* object) {
  ParaCollection* _this = reinterpret_cast< ParaCollection* >(object);
  (void)_this;
}
void ParaCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParaCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParaCollection& ParaCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParaCollection_costmap_5fparameter_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void ParaCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:f1tenth_costmap.ParaCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(para_costmap_interface_ != nullptr);
      para_costmap_interface_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(footprint_ != nullptr);
      footprint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(para_basic_ != nullptr);
      para_basic_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .f1tenth_costmap.ParaCostmapInterface para_costmap_interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_costmap_interface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .f1tenth_costmap.Footprint footprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_footprint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .f1tenth_costmap.ParaBasic para_basic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_para_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParaCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1tenth_costmap.ParaCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .f1tenth_costmap.ParaCostmapInterface para_costmap_interface = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::para_costmap_interface(this), target, stream);
  }

  // required .f1tenth_costmap.Footprint footprint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::footprint(this), target, stream);
  }

  // required .f1tenth_costmap.ParaBasic para_basic = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::para_basic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1tenth_costmap.ParaCollection)
  return target;
}

size_t ParaCollection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:f1tenth_costmap.ParaCollection)
  size_t total_size = 0;

  if (_internal_has_para_costmap_interface()) {
    // required .f1tenth_costmap.ParaCostmapInterface para_costmap_interface = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *para_costmap_interface_);
  }

  if (_internal_has_footprint()) {
    // required .f1tenth_costmap.Footprint footprint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footprint_);
  }

  if (_internal_has_para_basic()) {
    // required .f1tenth_costmap.ParaBasic para_basic = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *para_basic_);
  }

  return total_size;
}
size_t ParaCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1tenth_costmap.ParaCollection)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .f1tenth_costmap.ParaCostmapInterface para_costmap_interface = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *para_costmap_interface_);

    // required .f1tenth_costmap.Footprint footprint = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footprint_);

    // required .f1tenth_costmap.ParaBasic para_basic = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *para_basic_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParaCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1tenth_costmap.ParaCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const ParaCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParaCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1tenth_costmap.ParaCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1tenth_costmap.ParaCollection)
    MergeFrom(*source);
  }
}

void ParaCollection::MergeFrom(const ParaCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1tenth_costmap.ParaCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_para_costmap_interface()->::f1tenth_costmap::ParaCostmapInterface::MergeFrom(from._internal_para_costmap_interface());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_footprint()->::f1tenth_costmap::Footprint::MergeFrom(from._internal_footprint());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_para_basic()->::f1tenth_costmap::ParaBasic::MergeFrom(from._internal_para_basic());
    }
  }
}

void ParaCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1tenth_costmap.ParaCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaCollection::CopyFrom(const ParaCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1tenth_costmap.ParaCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaCollection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_para_costmap_interface()) {
    if (!para_costmap_interface_->IsInitialized()) return false;
  }
  if (_internal_has_footprint()) {
    if (!footprint_->IsInitialized()) return false;
  }
  if (_internal_has_para_basic()) {
    if (!para_basic_->IsInitialized()) return false;
  }
  return true;
}

void ParaCollection::InternalSwap(ParaCollection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaCollection, para_basic_)
      + sizeof(ParaCollection::para_basic_)
      - PROTOBUF_FIELD_OFFSET(ParaCollection, para_costmap_interface_)>(
          reinterpret_cast<char*>(&para_costmap_interface_),
          reinterpret_cast<char*>(&other->para_costmap_interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace f1tenth_costmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1tenth_costmap::ParaBasic* Arena::CreateMaybeMessage< ::f1tenth_costmap::ParaBasic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_costmap::ParaBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_costmap::ParaCostmapInterface* Arena::CreateMaybeMessage< ::f1tenth_costmap::ParaCostmapInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_costmap::ParaCostmapInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_costmap::Point* Arena::CreateMaybeMessage< ::f1tenth_costmap::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_costmap::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_costmap::Footprint* Arena::CreateMaybeMessage< ::f1tenth_costmap::Footprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_costmap::Footprint >(arena);
}
template<> PROTOBUF_NOINLINE ::f1tenth_costmap::ParaCollection* Arena::CreateMaybeMessage< ::f1tenth_costmap::ParaCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1tenth_costmap::ParaCollection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
